{
    "file_contents": {
        "drizzle.config.ts": {
            "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
            "size_bytes": 325
        },
        "postcss.config.js": {
            "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
            "size_bytes": 80
        },
        "replit.md": {
            "content": "# EcoShare - AI-Powered Campus Food Sharing Platform\n\n## Overview\n\nEcoShare is an intelligent surplus food management platform that connects campus communities to reduce waste and feed everyone. The application uses Google Gemini AI to automatically analyze food images, categorize items, assess freshness levels, and calculate environmental impact. Users can share surplus food through an intuitive interface and discover available items nearby, creating a sustainable campus ecosystem that reduces food waste while building community connections.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n**Database and Authentication Setup (August 19, 2025):**\n- Successfully created PostgreSQL database and pushed complete schema\n- Fixed DATABASE_URL environment variable configuration\n- Configured Google OAuth 2.0 for local development with proper Replit domain callback\n- Updated OAuth callback URL to use dynamic Replit domain for proper authentication flow\n- Tested and verified Google authentication working correctly\n- App is fully functional with all database tables and authentication system operational\n\n## System Architecture\n\n### Full-Stack Monorepo Architecture\nThe application follows a monorepo structure with clear separation between client, server, and shared code. The frontend is built with React and Vite for fast development, while the backend uses Express.js with TypeScript. Shared schemas and types ensure type safety across the entire stack.\n\n### Frontend Architecture\n- **React 18 with TypeScript**: Modern React features with comprehensive type safety\n- **Vite Build System**: Fast development server and optimized production builds\n- **Wouter Routing**: Lightweight client-side routing without React Router overhead\n- **TanStack Query**: Server state management with caching, synchronization, and background updates\n- **shadcn/ui Components**: Radix UI primitives with customizable design system\n- **Tailwind CSS**: Utility-first styling with custom design tokens and dark mode support\n- **React Hook Form + Zod**: Type-safe form handling with schema validation\n\n### Backend Architecture  \n- **Express.js with TypeScript**: RESTful API with type-safe request/response handling\n- **Google OAuth 2.0**: Secure authentication using Passport.js with session persistence\n- **PostgreSQL Sessions**: Database-backed session storage using connect-pg-simple\n- **Drizzle ORM**: Type-safe database operations with schema management and migrations\n- **Google Gemini AI Integration**: Intelligent food analysis with robust error handling and fallbacks\n- **Multer File Uploads**: Image processing with file size limits and validation\n\n### Database Schema Design\nThe PostgreSQL database supports comprehensive food sharing workflows:\n\n**Core Entities:**\n- **Users**: Profile management with Google OAuth integration and demo user support\n- **Food Listings**: Complete food item lifecycle with AI-generated metadata including category, freshness assessment, portions, location, and availability windows\n- **Pickups**: Reservation system connecting users with food listings, including scheduling and status tracking\n- **Notifications**: User engagement system for platform activities and updates\n\n**Analytics & Tracking:**\n- **User Stats**: Personal impact tracking including food saved, carbon footprint reduction, and community engagement metrics\n- **Platform Stats**: Aggregate community impact data for dashboard visualization\n- **Sessions**: PostgreSQL-backed session storage required for Google OAuth authentication\n\n### AI-Powered Food Analysis\nGoogle Gemini AI provides intelligent food categorization and assessment:\n- **Image Analysis**: Automatic food identification from uploaded photos\n- **Smart Categorization**: Classification into meals, snacks, beverages, desserts, produce, and baked goods  \n- **Freshness Assessment**: Real-time evaluation with safety recommendations (fresh, good, consume soon)\n- **Portion Estimation**: Serving size calculation based on visual analysis\n- **Safety Scoring**: Food safety assessment with consumption recommendations\n- **Fallback System**: Graceful degradation when AI services are unavailable, using default values to maintain functionality\n\n### Authentication & Security\n- **Google OAuth 2.0**: Secure user authentication with profile and email access\n- **Session Management**: PostgreSQL-backed sessions with configurable expiration and security settings\n- **CORS & Security Headers**: Production-ready security configuration\n- **Environment-Based Configuration**: Separate development and production OAuth callback handling\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon PostgreSQL**: Cloud-hosted PostgreSQL database with serverless scaling\n- **Google Cloud Platform**: OAuth 2.0 authentication services and Gemini AI API access\n\n### AI & Machine Learning\n- **Google Gemini AI**: Advanced food image analysis, categorization, and freshness assessment\n- **@google/generative-ai**: Official Google AI SDK for Gemini integration\n\n### Authentication & Sessions  \n- **Passport.js**: Authentication middleware with Google OAuth strategy\n- **connect-pg-simple**: PostgreSQL session store for persistent authentication\n- **express-session**: Session management middleware\n\n### Database & ORM\n- **@neondatabase/serverless**: Neon database connection with WebSocket support\n- **drizzle-orm**: Type-safe ORM with schema management and query builder\n- **drizzle-kit**: Database migration and schema management tools\n\n### Frontend Libraries\n- **@tanstack/react-query**: Server state management with caching and synchronization\n- **@radix-ui/***: Headless UI primitives for accessibility and customization\n- **wouter**: Lightweight routing library for React applications\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Form validation resolvers for Zod schema integration\n- **zod**: TypeScript-first schema validation library\n\n### Development & Build Tools\n- **Vite**: Fast build tool with TypeScript support and optimized bundling\n- **esbuild**: Fast JavaScript bundler for server-side code\n- **tsx**: TypeScript execution environment for Node.js\n- **Tailwind CSS**: Utility-first CSS framework with design system support\n- **PostCSS**: CSS processing with autoprefixer and Tailwind integration\n\n### File Processing\n- **multer**: Multipart form data handling for image uploads\n- **File size limits**: 5MB maximum for food image uploads with validation",
            "size_bytes": 6515
        },
        "tailwind.config.ts": {
            "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n",
            "size_bytes": 2766
        },
        "vite.config.ts": {
            "content": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n",
            "size_bytes": 971
        },
        "attached_assets/App_1755542610548.tsx": {
            "content": "import { Switch, Route, Redirect } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport HomePage from \"@/pages/home\";\nimport AuthPage from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(\"/auth\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <HomePage />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n",
            "size_bytes": 1600
        },
        "attached_assets/README_1755542259395.md": {
            "content": "# EcoShare - AI-Powered Campus Food Sharing Platform\n\nEcoShare is an intelligent surplus food management platform that connects campus communities to reduce waste and feed everyone. The application uses Google Gemini AI to automatically categorize food items, assess freshness, and provide environmental impact insights.\n\n## Features\n\n- **Google OAuth 2.0 Authentication** - Secure user authentication with Google accounts\n- **AI-Powered Food Analysis** - Automatic categorization, freshness assessment, and environmental impact calculation using Google Gemini\n- **Food Sharing System** - Users can share surplus food and discover available items nearby\n- **Environmental Impact Tracking** - Track carbon footprint reduction and community impact\n- **Real-time Dashboard** - View personal and platform-wide statistics\n- **Robust Error Handling** - Graceful fallbacks when AI services are unavailable\n\n## Tech Stack\n\n### Frontend\n- React 18 with TypeScript\n- Vite for fast development and optimized builds\n- TanStack Query for server state management\n- Radix UI primitives with shadcn/ui components\n- Tailwind CSS with dark mode support\n- React Hook Form with Zod validation\n\n### Backend\n- Express.js with TypeScript\n- PostgreSQL with Drizzle ORM\n- Google OAuth 2.0 with session management\n- Google Gemini AI integration\n- RESTful API design\n\n## Setup Instructions\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database (recommend Neon for cloud hosting)\n- Google Cloud Console account for OAuth and Gemini API\n- Git\n\n### 1. Clone and Install\n```bash\ngit clone https://github.com/yourusername/ecoshare.git\ncd ecoshare\nnpm install\n```\n\n### 2. Environment Variables\nCreate a `.env` file in the root directory with:\n\n```env\n# Database\nDATABASE_URL=postgresql://username:password@host:port/database\n\n# Google OAuth 2.0\nGOOGLE_CLIENT_ID=your_google_client_id\nGOOGLE_CLIENT_SECRET=your_google_client_secret\n\n# AI Integration\nGEMINI_API_KEY=your_gemini_api_key\n\n# Session Security\nSESSION_SECRET=your_random_session_secret_32_characters_minimum\n\n# Development\nNODE_ENV=development\n```\n\n### 3. Google OAuth Setup\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select existing\n3. Enable Google+ API\n4. Create OAuth 2.0 credentials\n5. Add authorized redirect URIs:\n   - Development: `http://localhost:5000/api/auth/google/callback`\n   - Production: `https://yourdomain.com/api/auth/google/callback`\n\n### 4. Google Gemini API Setup\n1. Go to [Google AI Studio](https://aistudio.google.com/)\n2. Create an API key\n3. Add the key to your environment variables\n\n### 5. Database Setup\n```bash\n# Push database schema to your PostgreSQL database\nnpm run db:push\n```\n\n### 6. Start Development Server\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n- `npm run db:push` - Push database schema changes\n- `npm run db:studio` - Open Drizzle Studio for database management\n\n## Project Structure\n\n```\necoshare/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # UI components\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/           # Utilities and configurations\n│   │   └── pages/         # Page components\n│   └── index.html\n├── server/                 # Express backend\n│   ├── auth.ts            # Authentication logic\n│   ├── routes.ts          # API routes\n│   ├── db.ts              # Database connection\n│   ├── gemini.ts          # AI integration\n│   └── index.ts           # Server entry point\n├── shared/                 # Shared types and schemas\n│   └── schema.ts          # Database schema and types\n└── package.json\n```\n\n## Deployment\n\nThe application is designed to work with various hosting platforms:\n\n- **Frontend**: Can be deployed to Vercel, Netlify, or any static hosting\n- **Backend**: Can be deployed to Railway, Render, Heroku, or any Node.js hosting\n- **Database**: Works with Neon, Supabase, or any PostgreSQL provider\n\nMake sure to set all environment variables in your hosting platform.\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Support\n\nIf you encounter any issues or have questions, please open an issue on GitHub.",
            "size_bytes": 4762
        },
        "attached_assets/auth_1755542269867.ts": {
            "content": "import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\n// Configure Google OAuth strategy\nconst getCallbackURL = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return process.env.REPLIT_DEV_DOMAIN \n      ? `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/google/callback`\n      : \"http://localhost:5000/api/auth/google/callback\";\n  }\n  return \"/api/auth/google/callback\";\n};\n\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n      callbackURL: getCallbackURL(),\n    },\n    async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n      try {\n        // Check if user already exists\n        let user = await storage.getUserByGoogleId(profile.id);\n        \n        if (user) {\n          return done(null, user);\n        }\n\n        // Create new user\n        const newUser = await storage.upsertUser({\n          googleId: profile.id,\n          email: profile.emails?.[0]?.value || \"\",\n          firstName: profile.name?.givenName || \"\",\n          lastName: profile.name?.familyName || \"\",\n          profileImageUrl: profile.photos?.[0]?.value || \"\",\n        });\n\n        return done(null, newUser);\n      } catch (error) {\n        return done(error as Error, undefined);\n      }\n    }\n  )\n);\n\n// Serialize user for session\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\nexport default passport;\n",
            "size_bytes": 1806
        },
        "attached_assets/auth_1755542591505.ts": {
            "content": "import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\n// Configure Google OAuth strategy\nconst getCallbackURL = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return process.env.REPLIT_DEV_DOMAIN \n      ? `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/google/callback`\n      : \"http://localhost:5000/api/auth/google/callback\";\n  }\n  return \"/api/auth/google/callback\";\n};\n\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n      callbackURL: getCallbackURL(),\n    },\n    async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n      try {\n        // Check if user already exists\n        let user = await storage.getUserByGoogleId(profile.id);\n        \n        if (user) {\n          return done(null, user);\n        }\n\n        // Create new user\n        const newUser = await storage.upsertUser({\n          googleId: profile.id,\n          email: profile.emails?.[0]?.value || \"\",\n          firstName: profile.name?.givenName || \"\",\n          lastName: profile.name?.familyName || \"\",\n          profileImageUrl: profile.photos?.[0]?.value || \"\",\n        });\n\n        return done(null, newUser);\n      } catch (error) {\n        return done(error as Error, undefined);\n      }\n    }\n  )\n);\n\n// Serialize user for session\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\nexport default passport;\n",
            "size_bytes": 1806
        },
        "attached_assets/auth_1755542618634.tsx": {
            "content": "import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Leaf } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function AuthPage() {\n  const { isAuthenticated, loginWithGoogle, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-blue-50 flex items-center justify-center px-4\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-blue-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-20 h-20 bg-gradient-to-r from-primary-500 to-primary-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Leaf className=\"w-10 h-10 text-white\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome to EcoShare</h2>\n            <p className=\"text-gray-600 mb-8\">\n              Join our campus community to share surplus food and reduce waste.\n            </p>\n            \n            <Button \n              onClick={loginWithGoogle}\n              className=\"w-full bg-white border-2 border-gray-200 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 transition-colors flex items-center justify-center space-x-3 mb-4\"\n              data-testid=\"button-google-auth\"\n            >\n              <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n                <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              <span>Continue with Google</span>\n            </Button>\n\n            <p className=\"text-xs text-gray-500\">\n              By signing up, you agree to our Terms of Service and Privacy Policy\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
            "size_bytes": 3028
        },
        "attached_assets/db_1755542269867.ts": {
            "content": "import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });",
            "size_bytes": 482
        },
        "attached_assets/db_1755542591506.ts": {
            "content": "import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });",
            "size_bytes": 482
        },
        "attached_assets/drizzle.config_1755542259394.ts": {
            "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
            "size_bytes": 325
        },
        "attached_assets/gemini_1755542269867.ts": {
            "content": "import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface FoodAnalysis {\n  category: string;\n  freshnessStatus: \"fresh\" | \"moderate\" | \"urgent\";\n  servesCount: number;\n  carbonSavings: number;\n  healthScore: number;\n  allergens: string[];\n  nutritionalHighlights: string[];\n  storageRecommendations: string;\n}\n\nexport async function analyzeFoodItem(\n  title: string,\n  description: string,\n  userCategory: string\n): Promise<FoodAnalysis> {\n  try {\n    const systemPrompt = `You are a food waste reduction expert and nutritionist. \nAnalyze the provided food item and provide detailed categorization and environmental impact assessment.\nConsider food safety, nutritional value, and waste reduction potential.\n\nRespond with JSON in this exact format:\n{\n  \"category\": \"meals|snacks|beverages|baked_goods|fruits_vegetables|dairy|other\",\n  \"freshnessStatus\": \"fresh|moderate|urgent\", \n  \"servesCount\": number,\n  \"carbonSavings\": number,\n  \"healthScore\": number,\n  \"allergens\": [\"allergen1\", \"allergen2\"],\n  \"nutritionalHighlights\": [\"highlight1\", \"highlight2\"],\n  \"storageRecommendations\": \"storage advice\"\n}\n\nFor carbonSavings, calculate kg CO2 saved based on:\n- Average food waste carbon footprint: 2.5kg CO2 per kg food\n- Estimate food weight from serving size and description\n- Consider food type (meat=higher, vegetables=lower impact)\n\nFor freshnessStatus:\n- \"fresh\": Recently prepared, safe for immediate consumption\n- \"moderate\": Good condition but should be consumed soon\n- \"urgent\": Needs immediate consumption to prevent waste\n\nFor healthScore: Rate 1-10 based on nutritional value and food safety.`;\n\n    const prompt = `Food Title: ${title}\nDescription: ${description}\nUser Suggested Category: ${userCategory}\n\nPlease analyze this food item thoroughly.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            category: { type: \"string\" },\n            freshnessStatus: { type: \"string\" },\n            servesCount: { type: \"number\" },\n            carbonSavings: { type: \"number\" },\n            healthScore: { type: \"number\" },\n            allergens: { \n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            nutritionalHighlights: {\n              type: \"array\", \n              items: { type: \"string\" }\n            },\n            storageRecommendations: { type: \"string\" }\n          },\n          required: [\"category\", \"freshnessStatus\", \"servesCount\", \"carbonSavings\", \"healthScore\", \"allergens\", \"nutritionalHighlights\", \"storageRecommendations\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const data: FoodAnalysis = JSON.parse(rawJson);\n      \n      // Validate and fallback for critical fields\n      if (![\"fresh\", \"moderate\", \"urgent\"].includes(data.freshnessStatus)) {\n        data.freshnessStatus = \"moderate\";\n      }\n      \n      if (![\"meals\", \"snacks\", \"beverages\", \"baked_goods\", \"fruits_vegetables\", \"dairy\", \"other\"].includes(data.category)) {\n        data.category = userCategory as any || \"other\";\n      }\n      \n      // Ensure reasonable bounds\n      data.servesCount = Math.max(1, Math.min(50, data.servesCount || 1));\n      data.carbonSavings = Math.max(0.1, Math.min(20, data.carbonSavings || 2.5));\n      data.healthScore = Math.max(1, Math.min(10, data.healthScore || 5));\n      \n      return data;\n    } else {\n      throw new Error(\"Empty response from AI model\");\n    }\n  } catch (error) {\n    console.error(\"AI analysis failed:\", error);\n    \n    // Fallback analysis based on basic heuristics\n    return {\n      category: userCategory as any || \"other\",\n      freshnessStatus: \"moderate\",\n      servesCount: 4,\n      carbonSavings: 2.5,\n      healthScore: 6,\n      allergens: [],\n      nutritionalHighlights: [\"Contains nutrients\"],\n      storageRecommendations: \"Store in refrigerator and consume within 24 hours\",\n    };\n  }\n}\n",
            "size_bytes": 4177
        },
        "attached_assets/gemini_1755542591506.ts": {
            "content": "import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface FoodAnalysis {\n  category: string;\n  freshnessStatus: \"fresh\" | \"moderate\" | \"urgent\";\n  servesCount: number;\n  carbonSavings: number;\n  healthScore: number;\n  allergens: string[];\n  nutritionalHighlights: string[];\n  storageRecommendations: string;\n}\n\nexport async function analyzeFoodItem(\n  title: string,\n  description: string,\n  userCategory: string\n): Promise<FoodAnalysis> {\n  try {\n    const systemPrompt = `You are a food waste reduction expert and nutritionist. \nAnalyze the provided food item and provide detailed categorization and environmental impact assessment.\nConsider food safety, nutritional value, and waste reduction potential.\n\nRespond with JSON in this exact format:\n{\n  \"category\": \"meals|snacks|beverages|baked_goods|fruits_vegetables|dairy|other\",\n  \"freshnessStatus\": \"fresh|moderate|urgent\", \n  \"servesCount\": number,\n  \"carbonSavings\": number,\n  \"healthScore\": number,\n  \"allergens\": [\"allergen1\", \"allergen2\"],\n  \"nutritionalHighlights\": [\"highlight1\", \"highlight2\"],\n  \"storageRecommendations\": \"storage advice\"\n}\n\nFor carbonSavings, calculate kg CO2 saved based on:\n- Average food waste carbon footprint: 2.5kg CO2 per kg food\n- Estimate food weight from serving size and description\n- Consider food type (meat=higher, vegetables=lower impact)\n\nFor freshnessStatus:\n- \"fresh\": Recently prepared, safe for immediate consumption\n- \"moderate\": Good condition but should be consumed soon\n- \"urgent\": Needs immediate consumption to prevent waste\n\nFor healthScore: Rate 1-10 based on nutritional value and food safety.`;\n\n    const prompt = `Food Title: ${title}\nDescription: ${description}\nUser Suggested Category: ${userCategory}\n\nPlease analyze this food item thoroughly.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            category: { type: \"string\" },\n            freshnessStatus: { type: \"string\" },\n            servesCount: { type: \"number\" },\n            carbonSavings: { type: \"number\" },\n            healthScore: { type: \"number\" },\n            allergens: { \n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            nutritionalHighlights: {\n              type: \"array\", \n              items: { type: \"string\" }\n            },\n            storageRecommendations: { type: \"string\" }\n          },\n          required: [\"category\", \"freshnessStatus\", \"servesCount\", \"carbonSavings\", \"healthScore\", \"allergens\", \"nutritionalHighlights\", \"storageRecommendations\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const data: FoodAnalysis = JSON.parse(rawJson);\n      \n      // Validate and fallback for critical fields\n      if (![\"fresh\", \"moderate\", \"urgent\"].includes(data.freshnessStatus)) {\n        data.freshnessStatus = \"moderate\";\n      }\n      \n      if (![\"meals\", \"snacks\", \"beverages\", \"baked_goods\", \"fruits_vegetables\", \"dairy\", \"other\"].includes(data.category)) {\n        data.category = userCategory as any || \"other\";\n      }\n      \n      // Ensure reasonable bounds\n      data.servesCount = Math.max(1, Math.min(50, data.servesCount || 1));\n      data.carbonSavings = Math.max(0.1, Math.min(20, data.carbonSavings || 2.5));\n      data.healthScore = Math.max(1, Math.min(10, data.healthScore || 5));\n      \n      return data;\n    } else {\n      throw new Error(\"Empty response from AI model\");\n    }\n  } catch (error) {\n    console.error(\"AI analysis failed:\", error);\n    \n    // Fallback analysis based on basic heuristics\n    return {\n      category: userCategory as any || \"other\",\n      freshnessStatus: \"moderate\",\n      servesCount: 4,\n      carbonSavings: 2.5,\n      healthScore: 6,\n      allergens: [],\n      nutritionalHighlights: [\"Contains nutrients\"],\n      storageRecommendations: \"Store in refrigerator and consume within 24 hours\",\n    };\n  }\n}\n",
            "size_bytes": 4177
        },
        "attached_assets/home_1755542618635.tsx": {
            "content": "import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navigation } from \"@/components/navigation\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { FoodListingsGrid } from \"@/components/food-listings-grid\";\nimport { CreateListingModal } from \"@/components/create-listing-modal\";\nimport { UserDashboard } from \"@/components/user-dashboard\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function HomePage() {\n  const { isAuthenticated } = useAuth();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected by App component\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation onCreateListing={() => setIsCreateModalOpen(true)} />\n      <HeroSection />\n      <FoodListingsGrid />\n      <UserDashboard />\n      <Footer />\n      \n      <CreateListingModal \n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n    </div>\n  );\n}\n",
            "size_bytes": 1039
        },
        "attached_assets/index_1755542269868.ts": {
            "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n",
            "size_bytes": 2066
        },
        "attached_assets/index_1755542591506.ts": {
            "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n",
            "size_bytes": 2066
        },
        "attached_assets/index_1755542610549.css": {
            "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(158.0986, 64.4186%, 51.1765%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(158.0986, 64.4186%, 51.1765%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(158.0986, 64.4186%, 51.1765%);\n  --chart-1: hsl(158.0986, 64.4186%, 51.1765%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(158.0986, 64.4186%, 51.1765%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(158.0986, 64.4186%, 51.1765%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(158.0986, 64.4186%, 51.1765%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(158.0986, 64.4186%, 51.1765%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(158.0986, 64.4186%, 51.1765%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(158.0986, 64.4186%, 51.1765%);\n  --chart-1: hsl(158.0986, 64.4186%, 51.1765%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(158.0986, 64.4186%, 51.1765%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(158.0986, 64.4186%, 51.1765%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(158.0986, 64.4186%, 51.1765%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom EcoShare styles */\n.primary-50 { background-color: hsl(151, 80%, 95%); }\n.primary-100 { background-color: hsl(149, 80%, 90%); }\n.primary-500 { background-color: hsl(158, 64%, 51%); }\n.primary-600 { background-color: hsl(160, 84%, 39%); }\n.primary-700 { background-color: hsl(161, 94%, 30%); }\n\n.secondary-100 { background-color: hsl(45, 93%, 87%); }\n.secondary-500 { background-color: hsl(38, 92%, 50%); }\n.secondary-600 { background-color: hsl(32, 95%, 44%); }\n\n.fresh { background-color: hsl(158, 64%, 51%); }\n.moderate { background-color: hsl(38, 92%, 50%); }\n.urgent { background-color: hsl(0, 84%, 60%); }\n\n/* Animation classes matching the design */\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n@keyframes slideUp {\n  0% { transform: translateY(30px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes pulseGlow {\n  0%, 100% { \n    box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);\n    transform: scale(1); \n  }\n  50% { \n    box-shadow: 0 0 30px rgba(16, 185, 129, 0.6);\n    transform: scale(1.02); \n  }\n}\n\n.animate-fade-in { animation: fadeIn 0.6s ease-out; }\n.animate-slide-up { animation: slideUp 0.8s ease-out; }\n.animate-pulse-glow { animation: pulseGlow 3s ease-in-out infinite; }\n",
            "size_bytes": 4671
        },
        "attached_assets/main_1755542610550.tsx": {
            "content": "import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
            "size_bytes": 157
        },
        "attached_assets/not-found_1755542618635.tsx": {
            "content": "import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
            "size_bytes": 711
        },
        "attached_assets/postcss.config_1755542259395.js": {
            "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
            "size_bytes": 80
        },
        "attached_assets/replit_1755542259395.md": {
            "content": "# EcoShare - AI-Powered Campus Food Sharing Platform\n\n## Overview\n\nEcoShare is an intelligent surplus food management platform that connects campus communities to reduce waste and feed everyone. The application uses Google Gemini AI to automatically categorize food items, assess freshness, and provide environmental impact insights. Users can share surplus food, discover available items nearby, and track their positive environmental impact through a comprehensive dashboard system.\n\n## Recent Changes (August 2025)\n\n- ✅ **Successfully migrated from Replit Auth to Google OAuth 2.0** - Complete authentication system overhaul\n- ✅ **VS Code Compatibility Achieved** - Restructured as standard Node.js application with proper package management\n- ✅ **Database Integration** - Connected to user's Neon PostgreSQL database with all tables created and functioning\n- ✅ **Food Listing Creation Working** - Form validation issues resolved, AI analysis with robust fallback system\n- ✅ **Robust Error Handling** - AI analysis gracefully falls back to default values when service unavailable\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack Monorepo Structure\nThe application follows a monorepo architecture with clear separation between client, server, and shared code:\n- **Frontend**: React 18 with TypeScript built using Vite for fast development and optimized production builds\n- **Backend**: Express.js server with TypeScript support serving both API endpoints and static files in production\n- **Shared**: Common TypeScript schemas and types shared between frontend and backend for type safety\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern React features\n- **Routing**: Wouter for lightweight client-side routing without the overhead of React Router\n- **State Management**: TanStack Query (React Query) for server state management, caching, and synchronization\n- **UI System**: Radix UI primitives with shadcn/ui component system for accessible, customizable components\n- **Styling**: Tailwind CSS with custom design tokens, CSS variables, and comprehensive dark mode support\n- **Forms**: React Hook Form with Zod validation for type-safe form handling and validation\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript for type-safe API development\n- **Database**: PostgreSQL with Drizzle ORM providing type-safe database operations and schema management\n- **Authentication**: Google OAuth with PostgreSQL session storage for persistent authentication\n- **AI Integration**: Google Gemini AI for intelligent food categorization, freshness assessment, and environmental insights\n- **Session Management**: PostgreSQL-backed session store using connect-pg-simple for scalable session persistence\n\n### Database Design\nThe PostgreSQL schema supports the complete food sharing workflow:\n- **Users**: User profiles integrated with Google OAuth, including demo user support\n- **Food Listings**: Comprehensive food items with AI-generated categories, freshness status, location, and availability windows\n- **Pickups**: Reservation system connecting users with food listings including scheduling and status tracking\n- **Notifications**: User notification system for platform activities and updates\n- **User Stats**: Environmental impact tracking including food saved, carbon footprint reduction, and engagement metrics\n- **Platform Stats**: Aggregate statistics for community impact visualization\n- **Sessions**: Required authentication session management table for Google OAuth integration\n\n### AI-Powered Intelligence\nGoogle Gemini AI integration provides four core intelligent features:\n- **Smart Food Categorization**: Automatic categorization into predefined categories (meals, snacks, beverages, baked goods, fruits/vegetables, dairy, other)\n- **Freshness Assessment**: AI-powered evaluation with safety recommendations and optimal consumption timeframes (fresh, moderate, urgent)\n- **Environmental Impact Analysis**: Carbon footprint savings calculation and personalized sustainability insights based on food waste prevention\n- **Enhanced Descriptions**: AI-generated appealing descriptions highlighting nutritional value, preparation details, and serving suggestions\n\n## External Dependencies\n\n### Database & Infrastructure\n- **PostgreSQL**: Primary database via Neon Database serverless platform\n- **Drizzle ORM**: Type-safe database operations with automated migration support\n\n### Authentication & Security\n- **Google OAuth 2.0**: User authentication with profile and email access\n- **Express Sessions**: Secure session management with PostgreSQL storage\n\n### AI & Machine Learning\n- **Google Gemini AI**: Food analysis, categorization, and environmental impact assessment\n\n### Frontend Libraries\n- **Radix UI**: Accessible component primitives for dialog, dropdown, form controls\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling with Zod schema validation\n- **Wouter**: Lightweight client-side routing\n\n### Development & Build Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Production bundle optimization",
            "size_bytes": 5361
        },
        "attached_assets/routes_1755542269868.ts": {
            "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport passport from \"./auth\";\nimport { storage } from \"./storage\";\nimport { analyzeFoodItem } from \"./gemini\";\nimport { insertFoodListingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst PgSession = connectPgSimple(session);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(session({\n    store: new PgSession({\n      conString: process.env.DATABASE_URL,\n      tableName: 'sessions',\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || 'your-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  // Initialize Passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Auth routes\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"],\n  }));\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/auth\" }),\n    (req, res) => {\n      res.redirect(\"/\");\n    }\n  );\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.user) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (req.user) {\n      next();\n    } else {\n      res.status(401).json({ message: \"Authentication required\" });\n    }\n  };\n\n  // Food listings routes\n  app.get(\"/api/listings\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const listings = await storage.getFoodListings(limit);\n      res.json(listings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch listings\" });\n    }\n  });\n\n  app.get(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getFoodListingById(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      res.json(listing);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch listing\" });\n    }\n  });\n\n  app.post(\"/api/listings\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      console.log('Raw request body:', JSON.stringify(req.body, null, 2));\n      \n      // Transform the data to match schema expectations\n      const transformedData = {\n        ...req.body,\n        providerId: user.id,\n        providerName: `${user.firstName} ${user.lastName}`.trim() || user.email,\n        // Ensure availableUntil is a proper Date object\n        availableUntil: new Date(req.body.availableUntil),\n      };\n      \n      console.log('Transformed data:', JSON.stringify(transformedData, null, 2));\n      const validatedData = insertFoodListingSchema.parse(transformedData);\n\n      // Analyze food item with AI (with fallback)\n      let aiAnalysis;\n      try {\n        aiAnalysis = await analyzeFoodItem(\n          validatedData.title,\n          validatedData.description,\n          validatedData.category\n        );\n      } catch (error) {\n        console.log('AI analysis failed, using fallback values:', error);\n        aiAnalysis = {\n          category: validatedData.category,\n          freshnessStatus: validatedData.freshnessStatus,\n          servesCount: 1,\n          carbonSavings: 0.5, // Default carbon savings\n          healthScore: 7,\n          allergens: [],\n          nutritionalHighlights: [\"Food available for sharing\"],\n          storageRecommendations: \"Standard food safety guidelines apply\"\n        };\n      }\n\n      const listingData = {\n        ...validatedData,\n        freshnessStatus: aiAnalysis.freshnessStatus || validatedData.freshnessStatus,\n        carbonSavings: aiAnalysis.carbonSavings?.toString() || \"0\",\n        servesCount: aiAnalysis.servesCount || 1,\n        aiAnalysis: aiAnalysis,\n      };\n\n      const listing = await storage.createFoodListing(listingData);\n      res.json(listing);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.log('Validation error details:', JSON.stringify(error.errors, null, 2));\n        console.log('Request body:', JSON.stringify(req.body, null, 2));\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error('Server error creating listing:', error);\n      res.status(500).json({ message: \"Failed to create listing\" });\n    }\n  });\n\n  app.get(\"/api/listings/provider/:providerId\", requireAuth, async (req, res) => {\n    try {\n      const listings = await storage.getFoodListingsByProvider(req.params.providerId);\n      res.json(listings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch provider listings\" });\n    }\n  });\n\n  // Pickup routes\n  app.post(\"/api/pickups\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const pickup = await storage.createPickup({\n        ...req.body,\n        recipientId: user.id,\n      });\n      res.json(pickup);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create pickup\" });\n    }\n  });\n\n  app.get(\"/api/pickups/user/:userId\", requireAuth, async (req, res) => {\n    try {\n      const pickups = await storage.getPickupsByUser(req.params.userId);\n      res.json(pickups);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pickups\" });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats/user/:userId\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.userId);\n      res.json(stats || {\n        totalFoodSaved: \"0\",\n        totalCarbonSaved: \"0\",\n        totalPeopleServed: 0,\n        totalListings: 0,\n        totalPickups: 0,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  app.get(\"/api/stats/platform\", async (req, res) => {\n    try {\n      let stats = await storage.getPlatformStats();\n      if (!stats) {\n        stats = await storage.updatePlatformStats();\n      }\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch platform stats\" });\n    }\n  });\n\n  // Notifications routes\n  app.get(\"/api/notifications/:userId\", requireAuth, async (req, res) => {\n    try {\n      const notifications = await storage.getNotificationsByUser(req.params.userId);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n",
            "size_bytes": 7494
        },
        "attached_assets/routes_1755542591506.ts": {
            "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport passport from \"./auth\";\nimport { storage } from \"./storage\";\nimport { analyzeFoodItem } from \"./gemini\";\nimport { insertFoodListingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst PgSession = connectPgSimple(session);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(session({\n    store: new PgSession({\n      conString: process.env.DATABASE_URL,\n      tableName: 'sessions',\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || 'your-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  // Initialize Passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Auth routes\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"],\n  }));\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/auth\" }),\n    (req, res) => {\n      res.redirect(\"/\");\n    }\n  );\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.user) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (req.user) {\n      next();\n    } else {\n      res.status(401).json({ message: \"Authentication required\" });\n    }\n  };\n\n  // Food listings routes\n  app.get(\"/api/listings\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const listings = await storage.getFoodListings(limit);\n      res.json(listings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch listings\" });\n    }\n  });\n\n  app.get(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getFoodListingById(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      res.json(listing);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch listing\" });\n    }\n  });\n\n  app.post(\"/api/listings\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      console.log('Raw request body:', JSON.stringify(req.body, null, 2));\n      \n      // Transform the data to match schema expectations\n      const transformedData = {\n        ...req.body,\n        providerId: user.id,\n        providerName: `${user.firstName} ${user.lastName}`.trim() || user.email,\n        // Ensure availableUntil is a proper Date object\n        availableUntil: new Date(req.body.availableUntil),\n      };\n      \n      console.log('Transformed data:', JSON.stringify(transformedData, null, 2));\n      const validatedData = insertFoodListingSchema.parse(transformedData);\n\n      // Analyze food item with AI (with fallback)\n      let aiAnalysis;\n      try {\n        aiAnalysis = await analyzeFoodItem(\n          validatedData.title,\n          validatedData.description,\n          validatedData.category\n        );\n      } catch (error) {\n        console.log('AI analysis failed, using fallback values:', error);\n        aiAnalysis = {\n          category: validatedData.category,\n          freshnessStatus: validatedData.freshnessStatus,\n          servesCount: 1,\n          carbonSavings: 0.5, // Default carbon savings\n          healthScore: 7,\n          allergens: [],\n          nutritionalHighlights: [\"Food available for sharing\"],\n          storageRecommendations: \"Standard food safety guidelines apply\"\n        };\n      }\n\n      const listingData = {\n        ...validatedData,\n        freshnessStatus: aiAnalysis.freshnessStatus || validatedData.freshnessStatus,\n        carbonSavings: aiAnalysis.carbonSavings?.toString() || \"0\",\n        servesCount: aiAnalysis.servesCount || 1,\n        aiAnalysis: aiAnalysis,\n      };\n\n      const listing = await storage.createFoodListing(listingData);\n      res.json(listing);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.log('Validation error details:', JSON.stringify(error.errors, null, 2));\n        console.log('Request body:', JSON.stringify(req.body, null, 2));\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error('Server error creating listing:', error);\n      res.status(500).json({ message: \"Failed to create listing\" });\n    }\n  });\n\n  app.get(\"/api/listings/provider/:providerId\", requireAuth, async (req, res) => {\n    try {\n      const listings = await storage.getFoodListingsByProvider(req.params.providerId);\n      res.json(listings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch provider listings\" });\n    }\n  });\n\n  // Pickup routes\n  app.post(\"/api/pickups\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const pickup = await storage.createPickup({\n        ...req.body,\n        recipientId: user.id,\n      });\n      res.json(pickup);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create pickup\" });\n    }\n  });\n\n  app.get(\"/api/pickups/user/:userId\", requireAuth, async (req, res) => {\n    try {\n      const pickups = await storage.getPickupsByUser(req.params.userId);\n      res.json(pickups);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pickups\" });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats/user/:userId\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.userId);\n      res.json(stats || {\n        totalFoodSaved: \"0\",\n        totalCarbonSaved: \"0\",\n        totalPeopleServed: 0,\n        totalListings: 0,\n        totalPickups: 0,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  app.get(\"/api/stats/platform\", async (req, res) => {\n    try {\n      let stats = await storage.getPlatformStats();\n      if (!stats) {\n        stats = await storage.updatePlatformStats();\n      }\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch platform stats\" });\n    }\n  });\n\n  // Notifications routes\n  app.get(\"/api/notifications/:userId\", requireAuth, async (req, res) => {\n    try {\n      const notifications = await storage.getNotificationsByUser(req.params.userId);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n",
            "size_bytes": 7494
        },
        "attached_assets/schema_1755542280960.ts": {
            "content": "import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  integer,\n  boolean,\n  decimal,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for session management, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  googleId: text(\"google_id\").unique(),\n  isDemo: boolean(\"is_demo\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Food freshness status enum\nexport const freshnessStatusEnum = pgEnum(\"freshness_status\", [\"fresh\", \"moderate\", \"urgent\"]);\n\n// Food categories enum\nexport const foodCategoryEnum = pgEnum(\"food_category\", [\n  \"meals\",\n  \"snacks\",\n  \"beverages\",\n  \"baked_goods\",\n  \"fruits_vegetables\",\n  \"dairy\",\n  \"other\"\n]);\n\n// Pickup status enum\nexport const pickupStatusEnum = pgEnum(\"pickup_status\", [\"available\", \"reserved\", \"completed\", \"expired\"]);\n\n// Food listings table\nexport const foodListings = pgTable(\"food_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: foodCategoryEnum(\"category\").notNull(),\n  quantity: varchar(\"quantity\").notNull(),\n  location: varchar(\"location\").notNull(),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  providerName: varchar(\"provider_name\").notNull(),\n  imageUrl: varchar(\"image_url\"),\n  freshnessStatus: freshnessStatusEnum(\"freshness_status\").notNull(),\n  availableUntil: timestamp(\"available_until\").notNull(),\n  pickupInstructions: text(\"pickup_instructions\"),\n  isActive: boolean(\"is_active\").default(true),\n  servesCount: integer(\"serves_count\"),\n  carbonSavings: decimal(\"carbon_savings\", { precision: 10, scale: 2 }),\n  aiAnalysis: jsonb(\"ai_analysis\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pickup reservations table\nexport const pickups = pgTable(\"pickups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  foodListingId: varchar(\"food_listing_id\").notNull().references(() => foodListings.id),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => users.id),\n  status: pickupStatusEnum(\"status\").default(\"available\"),\n  scheduledTime: timestamp(\"scheduled_time\"),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  relatedListingId: varchar(\"related_listing_id\").references(() => foodListings.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User statistics table for tracking impact\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  totalFoodSaved: decimal(\"total_food_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCarbonSaved: decimal(\"total_carbon_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalPeopleServed: integer(\"total_people_served\").default(0),\n  totalListings: integer(\"total_listings\").default(0),\n  totalPickups: integer(\"total_pickups\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Platform statistics table for global stats\nexport const platformStats = pgTable(\"platform_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalFoodSaved: decimal(\"total_food_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCarbonSaved: decimal(\"total_carbon_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalPeopleServed: integer(\"total_people_served\").default(0),\n  activeListings: integer(\"active_listings\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  foodListings: many(foodListings),\n  pickups: many(pickups),\n  notifications: many(notifications),\n  stats: one(userStats),\n}));\n\nexport const foodListingsRelations = relations(foodListings, ({ one, many }) => ({\n  provider: one(users, {\n    fields: [foodListings.providerId],\n    references: [users.id],\n  }),\n  pickups: many(pickups),\n  notifications: many(notifications),\n}));\n\nexport const pickupsRelations = relations(pickups, ({ one }) => ({\n  foodListing: one(foodListings, {\n    fields: [pickups.foodListingId],\n    references: [foodListings.id],\n  }),\n  recipient: one(users, {\n    fields: [pickups.recipientId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  relatedListing: one(foodListings, {\n    fields: [notifications.relatedListingId],\n    references: [foodListings.id],\n  }),\n}));\n\nexport const userStatsRelations = relations(userStats, ({ one }) => ({\n  user: one(users, {\n    fields: [userStats.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertFoodListingSchema = createInsertSchema(foodListings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPickupSchema = createInsertSchema(pickups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  lastUpdated: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type FoodListing = typeof foodListings.$inferSelect;\nexport type InsertFoodListing = z.infer<typeof insertFoodListingSchema>;\nexport type Pickup = typeof pickups.$inferSelect;\nexport type InsertPickup = z.infer<typeof insertPickupSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type PlatformStats = typeof platformStats.$inferSelect;\n",
            "size_bytes": 7248
        },
        "attached_assets/schema_1755542579568.ts": {
            "content": "import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  integer,\n  boolean,\n  decimal,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for session management, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  googleId: text(\"google_id\").unique(),\n  isDemo: boolean(\"is_demo\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Food freshness status enum\nexport const freshnessStatusEnum = pgEnum(\"freshness_status\", [\"fresh\", \"moderate\", \"urgent\"]);\n\n// Food categories enum\nexport const foodCategoryEnum = pgEnum(\"food_category\", [\n  \"meals\",\n  \"snacks\",\n  \"beverages\",\n  \"baked_goods\",\n  \"fruits_vegetables\",\n  \"dairy\",\n  \"other\"\n]);\n\n// Pickup status enum\nexport const pickupStatusEnum = pgEnum(\"pickup_status\", [\"available\", \"reserved\", \"completed\", \"expired\"]);\n\n// Food listings table\nexport const foodListings = pgTable(\"food_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: foodCategoryEnum(\"category\").notNull(),\n  quantity: varchar(\"quantity\").notNull(),\n  location: varchar(\"location\").notNull(),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  providerName: varchar(\"provider_name\").notNull(),\n  imageUrl: varchar(\"image_url\"),\n  freshnessStatus: freshnessStatusEnum(\"freshness_status\").notNull(),\n  availableUntil: timestamp(\"available_until\").notNull(),\n  pickupInstructions: text(\"pickup_instructions\"),\n  isActive: boolean(\"is_active\").default(true),\n  servesCount: integer(\"serves_count\"),\n  carbonSavings: decimal(\"carbon_savings\", { precision: 10, scale: 2 }),\n  aiAnalysis: jsonb(\"ai_analysis\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pickup reservations table\nexport const pickups = pgTable(\"pickups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  foodListingId: varchar(\"food_listing_id\").notNull().references(() => foodListings.id),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => users.id),\n  status: pickupStatusEnum(\"status\").default(\"available\"),\n  scheduledTime: timestamp(\"scheduled_time\"),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  relatedListingId: varchar(\"related_listing_id\").references(() => foodListings.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User statistics table for tracking impact\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  totalFoodSaved: decimal(\"total_food_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCarbonSaved: decimal(\"total_carbon_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalPeopleServed: integer(\"total_people_served\").default(0),\n  totalListings: integer(\"total_listings\").default(0),\n  totalPickups: integer(\"total_pickups\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Platform statistics table for global stats\nexport const platformStats = pgTable(\"platform_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalFoodSaved: decimal(\"total_food_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCarbonSaved: decimal(\"total_carbon_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalPeopleServed: integer(\"total_people_served\").default(0),\n  activeListings: integer(\"active_listings\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  foodListings: many(foodListings),\n  pickups: many(pickups),\n  notifications: many(notifications),\n  stats: one(userStats),\n}));\n\nexport const foodListingsRelations = relations(foodListings, ({ one, many }) => ({\n  provider: one(users, {\n    fields: [foodListings.providerId],\n    references: [users.id],\n  }),\n  pickups: many(pickups),\n  notifications: many(notifications),\n}));\n\nexport const pickupsRelations = relations(pickups, ({ one }) => ({\n  foodListing: one(foodListings, {\n    fields: [pickups.foodListingId],\n    references: [foodListings.id],\n  }),\n  recipient: one(users, {\n    fields: [pickups.recipientId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  relatedListing: one(foodListings, {\n    fields: [notifications.relatedListingId],\n    references: [foodListings.id],\n  }),\n}));\n\nexport const userStatsRelations = relations(userStats, ({ one }) => ({\n  user: one(users, {\n    fields: [userStats.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertFoodListingSchema = createInsertSchema(foodListings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPickupSchema = createInsertSchema(pickups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  lastUpdated: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type FoodListing = typeof foodListings.$inferSelect;\nexport type InsertFoodListing = z.infer<typeof insertFoodListingSchema>;\nexport type Pickup = typeof pickups.$inferSelect;\nexport type InsertPickup = z.infer<typeof insertPickupSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type PlatformStats = typeof platformStats.$inferSelect;\n",
            "size_bytes": 7248
        },
        "attached_assets/storage_1755542269868.ts": {
            "content": "import {\n  users,\n  foodListings,\n  pickups,\n  notifications,\n  userStats,\n  platformStats,\n  type User,\n  type UpsertUser,\n  type FoodListing,\n  type InsertFoodListing,\n  type Pickup,\n  type InsertPickup,\n  type Notification,\n  type InsertNotification,\n  type UserStats,\n  type InsertUserStats,\n  type PlatformStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, count, sum } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Food listing operations\n  getFoodListings(limit?: number): Promise<FoodListing[]>;\n  getFoodListingById(id: string): Promise<FoodListing | undefined>;\n  createFoodListing(listing: InsertFoodListing): Promise<FoodListing>;\n  updateFoodListing(id: string, listing: Partial<InsertFoodListing>): Promise<FoodListing>;\n  deleteFoodListing(id: string): Promise<void>;\n  getFoodListingsByProvider(providerId: string): Promise<FoodListing[]>;\n  \n  // Pickup operations\n  createPickup(pickup: InsertPickup): Promise<Pickup>;\n  getPickupsByUser(userId: string): Promise<Pickup[]>;\n  updatePickupStatus(id: string, status: \"available\" | \"reserved\" | \"completed\" | \"expired\"): Promise<Pickup>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // Statistics operations\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  updateUserStats(userId: string, stats: Partial<InsertUserStats>): Promise<UserStats>;\n  getPlatformStats(): Promise<PlatformStats | undefined>;\n  updatePlatformStats(): Promise<PlatformStats>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (userData.googleId) {\n      // Try to find existing user by Google ID first\n      const existingUser = await this.getUserByGoogleId(userData.googleId);\n      if (existingUser) {\n        const [updatedUser] = await db\n          .update(users)\n          .set({\n            ...userData,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.googleId, userData.googleId))\n          .returning();\n        return updatedUser;\n      }\n    }\n\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: userData.email ? users.email : users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Create initial user stats\n    await this.getUserStats(user.id).then(async (stats) => {\n      if (!stats) {\n        await db.insert(userStats).values({ userId: user.id });\n      }\n    });\n    \n    return user;\n  }\n\n  // Food listing operations\n  async getFoodListings(limit = 20): Promise<FoodListing[]> {\n    return await db\n      .select()\n      .from(foodListings)\n      .where(and(eq(foodListings.isActive, true), gte(foodListings.availableUntil, new Date())))\n      .orderBy(desc(foodListings.createdAt))\n      .limit(limit);\n  }\n\n  async getFoodListingById(id: string): Promise<FoodListing | undefined> {\n    const [listing] = await db.select().from(foodListings).where(eq(foodListings.id, id));\n    return listing;\n  }\n\n  async createFoodListing(listing: InsertFoodListing): Promise<FoodListing> {\n    const [newListing] = await db.insert(foodListings).values(listing).returning();\n    \n    // Update user stats\n    await this.updateUserStats(listing.providerId, { totalListings: 1 });\n    \n    return newListing;\n  }\n\n  async updateFoodListing(id: string, listing: Partial<InsertFoodListing>): Promise<FoodListing> {\n    const [updated] = await db\n      .update(foodListings)\n      .set({ ...listing, updatedAt: new Date() })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFoodListing(id: string): Promise<void> {\n    await db.update(foodListings).set({ isActive: false }).where(eq(foodListings.id, id));\n  }\n\n  async getFoodListingsByProvider(providerId: string): Promise<FoodListing[]> {\n    return await db\n      .select()\n      .from(foodListings)\n      .where(eq(foodListings.providerId, providerId))\n      .orderBy(desc(foodListings.createdAt));\n  }\n\n  // Pickup operations\n  async createPickup(pickup: InsertPickup): Promise<Pickup> {\n    const [newPickup] = await db.insert(pickups).values(pickup).returning();\n    \n    // Update user stats\n    await this.updateUserStats(pickup.recipientId, { totalPickups: 1 });\n    \n    return newPickup;\n  }\n\n  async getPickupsByUser(userId: string): Promise<Pickup[]> {\n    return await db\n      .select()\n      .from(pickups)\n      .where(eq(pickups.recipientId, userId))\n      .orderBy(desc(pickups.createdAt));\n  }\n\n  async updatePickupStatus(id: string, status: \"available\" | \"reserved\" | \"completed\" | \"expired\"): Promise<Pickup> {\n    const [updated] = await db\n      .update(pickups)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(pickups.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id));\n  }\n\n  // Statistics operations\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    const [stats] = await db.select().from(userStats).where(eq(userStats.userId, userId));\n    return stats;\n  }\n\n  async updateUserStats(userId: string, statsUpdate: Partial<InsertUserStats>): Promise<UserStats> {\n    const currentStats = await this.getUserStats(userId);\n    \n    if (!currentStats) {\n      const [newStats] = await db.insert(userStats).values({ userId, ...statsUpdate }).returning();\n      return newStats;\n    }\n    \n    const updates: any = { lastUpdated: new Date() };\n    if (statsUpdate.totalFoodSaved) {\n      updates.totalFoodSaved = String(Number(currentStats.totalFoodSaved) + Number(statsUpdate.totalFoodSaved));\n    }\n    if (statsUpdate.totalCarbonSaved) {\n      updates.totalCarbonSaved = String(Number(currentStats.totalCarbonSaved) + Number(statsUpdate.totalCarbonSaved));\n    }\n    if (statsUpdate.totalPeopleServed) {\n      updates.totalPeopleServed = currentStats.totalPeopleServed + statsUpdate.totalPeopleServed;\n    }\n    if (statsUpdate.totalListings) {\n      updates.totalListings = currentStats.totalListings + statsUpdate.totalListings;\n    }\n    if (statsUpdate.totalPickups) {\n      updates.totalPickups = currentStats.totalPickups + statsUpdate.totalPickups;\n    }\n    \n    const [updated] = await db\n      .update(userStats)\n      .set(updates)\n      .where(eq(userStats.userId, userId))\n      .returning();\n    \n    return updated;\n  }\n\n  async getPlatformStats(): Promise<PlatformStats | undefined> {\n    const [stats] = await db.select().from(platformStats).limit(1);\n    return stats;\n  }\n\n  async updatePlatformStats(): Promise<PlatformStats> {\n    // Calculate current platform statistics\n    const [foodStats] = await db\n      .select({\n        totalFoodSaved: sum(userStats.totalFoodSaved),\n        totalCarbonSaved: sum(userStats.totalCarbonSaved),\n        totalPeopleServed: sum(userStats.totalPeopleServed),\n      })\n      .from(userStats);\n    \n    const [activeListingsCount] = await db\n      .select({ count: count() })\n      .from(foodListings)\n      .where(and(eq(foodListings.isActive, true), gte(foodListings.availableUntil, new Date())));\n    \n    const statsData = {\n      totalFoodSaved: foodStats.totalFoodSaved || \"0\",\n      totalCarbonSaved: foodStats.totalCarbonSaved || \"0\",\n      totalPeopleServed: foodStats.totalPeopleServed || 0,\n      activeListings: activeListingsCount.count || 0,\n      lastUpdated: new Date(),\n    };\n    \n    // Upsert platform stats\n    const existingStats = await this.getPlatformStats();\n    if (existingStats) {\n      const [updated] = await db\n        .update(platformStats)\n        .set(statsData)\n        .where(eq(platformStats.id, existingStats.id))\n        .returning();\n      return updated;\n    } else {\n      const [newStats] = await db.insert(platformStats).values(statsData).returning();\n      return newStats;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n",
            "size_bytes": 9465
        },
        "attached_assets/storage_1755542591507.ts": {
            "content": "import {\n  users,\n  foodListings,\n  pickups,\n  notifications,\n  userStats,\n  platformStats,\n  type User,\n  type UpsertUser,\n  type FoodListing,\n  type InsertFoodListing,\n  type Pickup,\n  type InsertPickup,\n  type Notification,\n  type InsertNotification,\n  type UserStats,\n  type InsertUserStats,\n  type PlatformStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, count, sum } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Food listing operations\n  getFoodListings(limit?: number): Promise<FoodListing[]>;\n  getFoodListingById(id: string): Promise<FoodListing | undefined>;\n  createFoodListing(listing: InsertFoodListing): Promise<FoodListing>;\n  updateFoodListing(id: string, listing: Partial<InsertFoodListing>): Promise<FoodListing>;\n  deleteFoodListing(id: string): Promise<void>;\n  getFoodListingsByProvider(providerId: string): Promise<FoodListing[]>;\n  \n  // Pickup operations\n  createPickup(pickup: InsertPickup): Promise<Pickup>;\n  getPickupsByUser(userId: string): Promise<Pickup[]>;\n  updatePickupStatus(id: string, status: \"available\" | \"reserved\" | \"completed\" | \"expired\"): Promise<Pickup>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // Statistics operations\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  updateUserStats(userId: string, stats: Partial<InsertUserStats>): Promise<UserStats>;\n  getPlatformStats(): Promise<PlatformStats | undefined>;\n  updatePlatformStats(): Promise<PlatformStats>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (userData.googleId) {\n      // Try to find existing user by Google ID first\n      const existingUser = await this.getUserByGoogleId(userData.googleId);\n      if (existingUser) {\n        const [updatedUser] = await db\n          .update(users)\n          .set({\n            ...userData,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.googleId, userData.googleId))\n          .returning();\n        return updatedUser;\n      }\n    }\n\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: userData.email ? users.email : users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Create initial user stats\n    await this.getUserStats(user.id).then(async (stats) => {\n      if (!stats) {\n        await db.insert(userStats).values({ userId: user.id });\n      }\n    });\n    \n    return user;\n  }\n\n  // Food listing operations\n  async getFoodListings(limit = 20): Promise<FoodListing[]> {\n    return await db\n      .select()\n      .from(foodListings)\n      .where(and(eq(foodListings.isActive, true), gte(foodListings.availableUntil, new Date())))\n      .orderBy(desc(foodListings.createdAt))\n      .limit(limit);\n  }\n\n  async getFoodListingById(id: string): Promise<FoodListing | undefined> {\n    const [listing] = await db.select().from(foodListings).where(eq(foodListings.id, id));\n    return listing;\n  }\n\n  async createFoodListing(listing: InsertFoodListing): Promise<FoodListing> {\n    const [newListing] = await db.insert(foodListings).values(listing).returning();\n    \n    // Update user stats\n    await this.updateUserStats(listing.providerId, { totalListings: 1 });\n    \n    return newListing;\n  }\n\n  async updateFoodListing(id: string, listing: Partial<InsertFoodListing>): Promise<FoodListing> {\n    const [updated] = await db\n      .update(foodListings)\n      .set({ ...listing, updatedAt: new Date() })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFoodListing(id: string): Promise<void> {\n    await db.update(foodListings).set({ isActive: false }).where(eq(foodListings.id, id));\n  }\n\n  async getFoodListingsByProvider(providerId: string): Promise<FoodListing[]> {\n    return await db\n      .select()\n      .from(foodListings)\n      .where(eq(foodListings.providerId, providerId))\n      .orderBy(desc(foodListings.createdAt));\n  }\n\n  // Pickup operations\n  async createPickup(pickup: InsertPickup): Promise<Pickup> {\n    const [newPickup] = await db.insert(pickups).values(pickup).returning();\n    \n    // Update user stats\n    await this.updateUserStats(pickup.recipientId, { totalPickups: 1 });\n    \n    return newPickup;\n  }\n\n  async getPickupsByUser(userId: string): Promise<Pickup[]> {\n    return await db\n      .select()\n      .from(pickups)\n      .where(eq(pickups.recipientId, userId))\n      .orderBy(desc(pickups.createdAt));\n  }\n\n  async updatePickupStatus(id: string, status: \"available\" | \"reserved\" | \"completed\" | \"expired\"): Promise<Pickup> {\n    const [updated] = await db\n      .update(pickups)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(pickups.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id));\n  }\n\n  // Statistics operations\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    const [stats] = await db.select().from(userStats).where(eq(userStats.userId, userId));\n    return stats;\n  }\n\n  async updateUserStats(userId: string, statsUpdate: Partial<InsertUserStats>): Promise<UserStats> {\n    const currentStats = await this.getUserStats(userId);\n    \n    if (!currentStats) {\n      const [newStats] = await db.insert(userStats).values({ userId, ...statsUpdate }).returning();\n      return newStats;\n    }\n    \n    const updates: any = { lastUpdated: new Date() };\n    if (statsUpdate.totalFoodSaved) {\n      updates.totalFoodSaved = String(Number(currentStats.totalFoodSaved) + Number(statsUpdate.totalFoodSaved));\n    }\n    if (statsUpdate.totalCarbonSaved) {\n      updates.totalCarbonSaved = String(Number(currentStats.totalCarbonSaved) + Number(statsUpdate.totalCarbonSaved));\n    }\n    if (statsUpdate.totalPeopleServed) {\n      updates.totalPeopleServed = currentStats.totalPeopleServed + statsUpdate.totalPeopleServed;\n    }\n    if (statsUpdate.totalListings) {\n      updates.totalListings = currentStats.totalListings + statsUpdate.totalListings;\n    }\n    if (statsUpdate.totalPickups) {\n      updates.totalPickups = currentStats.totalPickups + statsUpdate.totalPickups;\n    }\n    \n    const [updated] = await db\n      .update(userStats)\n      .set(updates)\n      .where(eq(userStats.userId, userId))\n      .returning();\n    \n    return updated;\n  }\n\n  async getPlatformStats(): Promise<PlatformStats | undefined> {\n    const [stats] = await db.select().from(platformStats).limit(1);\n    return stats;\n  }\n\n  async updatePlatformStats(): Promise<PlatformStats> {\n    // Calculate current platform statistics\n    const [foodStats] = await db\n      .select({\n        totalFoodSaved: sum(userStats.totalFoodSaved),\n        totalCarbonSaved: sum(userStats.totalCarbonSaved),\n        totalPeopleServed: sum(userStats.totalPeopleServed),\n      })\n      .from(userStats);\n    \n    const [activeListingsCount] = await db\n      .select({ count: count() })\n      .from(foodListings)\n      .where(and(eq(foodListings.isActive, true), gte(foodListings.availableUntil, new Date())));\n    \n    const statsData = {\n      totalFoodSaved: foodStats.totalFoodSaved || \"0\",\n      totalCarbonSaved: foodStats.totalCarbonSaved || \"0\",\n      totalPeopleServed: foodStats.totalPeopleServed || 0,\n      activeListings: activeListingsCount.count || 0,\n      lastUpdated: new Date(),\n    };\n    \n    // Upsert platform stats\n    const existingStats = await this.getPlatformStats();\n    if (existingStats) {\n      const [updated] = await db\n        .update(platformStats)\n        .set(statsData)\n        .where(eq(platformStats.id, existingStats.id))\n        .returning();\n      return updated;\n    } else {\n      const [newStats] = await db.insert(platformStats).values(statsData).returning();\n      return newStats;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n",
            "size_bytes": 9465
        },
        "attached_assets/tailwind.config_1755542259395.ts": {
            "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: [\"Inter\", \"-apple-system\", \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \"sans-serif\"],\n        inter: [\"Inter\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          50: \"#ecfdf5\",\n          100: \"#d1fae5\",\n          500: \"#10b981\",\n          600: \"#059669\",\n          700: \"#047857\",\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          100: \"#fef3c7\",\n          500: \"#f59e0b\",\n          600: \"#d97706\",\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        \n        // Custom EcoShare Colors\n        amber: {\n          100: \"#fef3c7\",\n          500: \"#f59e0b\",\n          600: \"#d97706\",\n        },\n        green: {\n          50: \"#ecfdf5\",\n          100: \"#d1fae5\",\n          500: \"#10b981\",\n          600: \"#059669\",\n          700: \"#047857\",\n        },\n        blue: {\n          50: \"#eff6ff\", \n          100: \"#dbeafe\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n        },\n        purple: {\n          100: \"#f3e8ff\",\n          500: \"#8b5cf6\",\n          600: \"#7c3aed\",\n        },\n        red: {\n          100: \"#fee2e2\",\n          500: \"#ef4444\",\n          600: \"#dc2626\",\n        },\n        \n        // Food freshness colors\n        fresh: \"#10b981\",\n        moderate: \"#f59e0b\", \n        urgent: \"#ef4444\",\n        success: \"#10b981\",\n        warning: \"#f59e0b\",\n        error: \"#ef4444\",\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          \"0%\": { opacity: \"0\" },\n          \"100%\": { opacity: \"1\" },\n        },\n        slideUp: {\n          \"0%\": { transform: \"translateY(30px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        scaleIn: {\n          \"0%\": { transform: \"scale(0.95)\", opacity: \"0\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n        pulseSoft: {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.7\" },\n        },\n        parallax: {\n          \"0%\": { transform: \"translateY(0px)\" },\n          \"100%\": { transform: \"translateY(-100px)\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-20px)\" },\n        },\n        pulseGlow: {\n          \"0%, 100%\": { \n            boxShadow: \"0 0 20px rgba(16, 185, 129, 0.3)\",\n            transform: \"scale(1)\" \n          },\n          \"50%\": { \n            boxShadow: \"0 0 30px rgba(16, 185, 129, 0.6)\",\n            transform: \"scale(1.02)\" \n          },\n        },\n        shimmer: {\n          \"0%\": { backgroundPosition: \"-200% 0\" },\n          \"100%\": { backgroundPosition: \"200% 0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.6s ease-out\",\n        \"slide-up\": \"slideUp 0.8s ease-out\",\n        \"scale-in\": \"scaleIn 0.2s ease-out\",\n        \"pulse-soft\": \"pulseSoft 2s ease-in-out infinite\",\n        \"parallax\": \"parallax 20s linear infinite\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"pulse-glow\": \"pulseGlow 3s ease-in-out infinite\",\n        \"shimmer\": \"shimmer 2s infinite\",\n      },\n      boxShadow: {\n        'primary': '0 10px 25px -3px rgba(16, 185, 129, 0.1), 0 4px 6px -2px rgba(16, 185, 129, 0.05)',\n        'glow': '0 0 20px rgba(16, 185, 129, 0.3)',\n        'glow-lg': '0 0 30px rgba(16, 185, 129, 0.6)',\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n        'gradient-primary': 'linear-gradient(135deg, #10b981, #059669)',\n        'gradient-hero': 'linear-gradient(135deg, #10b981, #059669, #3b82f6)',\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\")\n  ],\n} satisfies Config;\n",
            "size_bytes": 5763
        },
        "attached_assets/use-auth_1755542776853.ts": {
            "content": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/auth/logout\"),\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.clear();\n    },\n  });\n\n  const loginWithGoogle = () => {\n    window.location.href = \"/api/auth/google\";\n  };\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    loginWithGoogle,\n    logout,\n    error,\n  };\n}\n",
            "size_bytes": 849
        },
        "attached_assets/use-mobile_1755542776853.tsx": {
            "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
            "size_bytes": 565
        },
        "attached_assets/use-toast_1755542776853.ts": {
            "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
            "size_bytes": 3895
        },
        "attached_assets/vite_1755542269868.ts": {
            "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
            "size_bytes": 2263
        },
        "attached_assets/vite_1755542591507.ts": {
            "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
            "size_bytes": 2263
        },
        "server/db.ts": {
            "content": "import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { env } from \"./env\";\n\nif (!env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set\");\n}\n\nconst sql = neon(env.DATABASE_URL);\nexport const db = drizzle(sql);\n",
            "size_bytes": 271
        },
        "server/index.ts": {
            "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const { env } = await import(\"./env\");\n  const port = env.PORT;\n  const host = \"0.0.0.0\";\n  \n  server.listen(port, host, () => {\n    log(`serving on port ${port}`);\n    console.log(`\\n🚀 EcoShare is running at:`);\n    console.log(`   Local:   http://localhost:${port}`);\n    console.log(`   Network: http://127.0.0.1:${port}\\n`);\n  });\n})();\n",
            "size_bytes": 2224
        },
        "server/routes.ts": {
            "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { storage } from \"./storage\";\nimport { analyzeFoodImage } from \"./services/gemini\";\nimport { insertFoodListingSchema, insertPickupSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport { env } from \"./env\";\nimport ConnectPgSimple from \"connect-pg-simple\";\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration with PostgreSQL store\n  const PgSession = ConnectPgSimple(session);\n  \n  app.use(session({\n    store: new PgSession({\n      conString: env.DATABASE_URL,\n      tableName: 'sessions',\n      createTableIfMissing: true,\n    }),\n    secret: env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: env.isProduction(), \n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Passport configuration\n  const callbackURL = env.isReplit() \n    ? `https://${process.env.REPLIT_DOMAINS}/api/auth/google/callback`\n    : \"/api/auth/google/callback\";\n    \n  passport.use(new GoogleStrategy({\n    clientID: env.GOOGLE_CLIENT_ID,\n    clientSecret: env.GOOGLE_CLIENT_SECRET,\n    callbackURL: callbackURL\n  }, async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      const user = await storage.upsertUser({\n        email: profile.emails?.[0]?.value || \"\",\n        googleId: profile.id,\n        name: profile.displayName || \"\",\n        profilePicture: profile.photos?.[0]?.value || \"\",\n      });\n      return done(null, user);\n    } catch (error) {\n      return done(error, null);\n    }\n  }));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  // Auth routes\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] }));\n\n  app.get(\"/api/auth/google/callback\", \n    (req, res, next) => {\n      console.log(\"OAuth callback received with code:\", req.query.code ? \"present\" : \"missing\");\n      console.log(\"OAuth callback received with error:\", req.query.error || \"none\");\n      next();\n    },\n    passport.authenticate(\"google\", { \n      failureRedirect: \"/?error=auth_failed\",\n      failureMessage: true \n    }),\n    (req, res) => {\n      console.log(\"OAuth callback successful, user:\", (req.user as any)?.email);\n      res.redirect(\"/?success=authenticated\");\n    }\n  );\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) return res.status(500).json({ error: \"Failed to logout\" });\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    res.json(req.user || null);\n  });\n\n  // Demo authentication route for testing\n  app.post(\"/api/auth/demo\", async (req, res) => {\n    try {\n      const demoUser = await storage.upsertUser({\n        email: \"demo@ecoshare.app\",\n        name: \"Demo User\",\n        profilePicture: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\",\n      });\n      \n      req.login(demoUser, (err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Failed to login demo user\" });\n        }\n        res.json(demoUser);\n      });\n    } catch (error) {\n      console.error(\"Demo auth error:\", error);\n      res.status(500).json({ error: \"Failed to create demo user\" });\n    }\n  });\n\n  // Middleware to check authentication\n  function requireAuth(req: any, res: any, next: any) {\n    if (!req.user) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    next();\n  }\n\n  // Food listing routes\n  app.get(\"/api/food-listings\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 20;\n      const listings = await storage.getFoodListings(limit);\n      res.json(listings);\n    } catch (error) {\n      console.error(\"Failed to get food listings:\", error);\n      res.status(500).json({ error: \"Failed to fetch food listings\" });\n    }\n  });\n\n  app.get(\"/api/food-listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getFoodListingById(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ error: \"Food listing not found\" });\n      }\n      res.json(listing);\n    } catch (error) {\n      console.error(\"Failed to get food listing:\", error);\n      res.status(500).json({ error: \"Failed to fetch food listing\" });\n    }\n  });\n\n  app.post(\"/api/food-listings\", requireAuth, upload.single(\"image\"), async (req: any, res) => {\n    try {\n      let listingData = JSON.parse(req.body.data || \"{}\");\n      \n      // AI image analysis if image provided\n      if (req.file) {\n        try {\n          const imageBase64 = req.file.buffer.toString('base64');\n          const analysis = await analyzeFoodImage(imageBase64, req.file.mimetype);\n          \n          // Use AI analysis to enhance listing data\n          listingData = {\n            ...listingData,\n            title: listingData.title || analysis.title,\n            description: listingData.description || analysis.description,\n            category: listingData.category || analysis.category,\n            freshnessLevel: listingData.freshnessLevel || analysis.freshnessLevel,\n            portions: listingData.portions || analysis.portions,\n          };\n        } catch (error) {\n          console.error(\"AI analysis failed:\", error);\n          // Continue without AI analysis\n        }\n      }\n\n      const validatedData = insertFoodListingSchema.parse({\n        ...listingData,\n        providerId: req.user.id,\n      });\n\n      const listing = await storage.createFoodListing(validatedData);\n      res.json(listing);\n    } catch (error) {\n      console.error(\"Failed to create food listing:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid listing data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create food listing\" });\n    }\n  });\n\n  app.get(\"/api/my-listings\", requireAuth, async (req: any, res) => {\n    try {\n      const listings = await storage.getFoodListingsByProvider(req.user.id);\n      res.json(listings);\n    } catch (error) {\n      console.error(\"Failed to get user listings:\", error);\n      res.status(500).json({ error: \"Failed to fetch user listings\" });\n    }\n  });\n\n  // Pickup routes\n  app.post(\"/api/pickups\", requireAuth, async (req: any, res) => {\n    try {\n      const validatedData = insertPickupSchema.parse({\n        ...req.body,\n        recipientId: req.user.id,\n      });\n\n      const pickup = await storage.createPickup(validatedData);\n      \n      // Create notification for food provider\n      const listing = await storage.getFoodListingById(pickup.listingId);\n      if (listing) {\n        await storage.createNotification({\n          userId: listing.providerId,\n          title: \"Food Reserved\",\n          message: `${req.user.name} reserved your ${listing.title}`,\n          type: \"pickup_reserved\",\n        });\n      }\n\n      res.json(pickup);\n    } catch (error) {\n      console.error(\"Failed to create pickup:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid pickup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create pickup\" });\n    }\n  });\n\n  app.get(\"/api/my-pickups\", requireAuth, async (req: any, res) => {\n    try {\n      const pickups = await storage.getPickupsByUser(req.user.id);\n      res.json(pickups);\n    } catch (error) {\n      console.error(\"Failed to get user pickups:\", error);\n      res.status(500).json({ error: \"Failed to fetch user pickups\" });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats/platform\", async (req, res) => {\n    try {\n      const stats = await storage.updatePlatformStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Failed to get platform stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch platform statistics\" });\n    }\n  });\n\n  app.get(\"/api/stats/user\", requireAuth, async (req: any, res) => {\n    try {\n      const stats = await storage.getUserStats(req.user.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Failed to get user stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch user statistics\" });\n    }\n  });\n\n  // Notifications routes\n  app.get(\"/api/notifications\", requireAuth, async (req: any, res) => {\n    try {\n      const notifications = await storage.getNotificationsByUser(req.user.id);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Failed to get notifications:\", error);\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Failed to mark notification as read:\", error);\n      res.status(500).json({ error: \"Failed to update notification\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n",
            "size_bytes": 9674
        },
        "server/storage.ts": {
            "content": "import {\n  users,\n  foodListings,\n  pickups,\n  notifications,\n  userStats,\n  platformStats,\n  type User,\n  type UpsertUser,\n  type FoodListing,\n  type InsertFoodListing,\n  type Pickup,\n  type InsertPickup,\n  type Notification,\n  type InsertNotification,\n  type UserStats,\n  type InsertUserStats,\n  type PlatformStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, count, sum, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Food listing operations\n  getFoodListings(limit?: number): Promise<FoodListing[]>;\n  getFoodListingById(id: string): Promise<FoodListing | undefined>;\n  createFoodListing(listing: InsertFoodListing): Promise<FoodListing>;\n  updateFoodListing(id: string, listing: Partial<InsertFoodListing>): Promise<FoodListing>;\n  deleteFoodListing(id: string): Promise<void>;\n  getFoodListingsByProvider(providerId: string): Promise<FoodListing[]>;\n  \n  // Pickup operations\n  createPickup(pickup: InsertPickup): Promise<Pickup>;\n  getPickupsByUser(userId: string): Promise<Pickup[]>;\n  updatePickupStatus(id: string, status: \"reserved\" | \"completed\" | \"expired\"): Promise<Pickup>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // Statistics operations\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  updateUserStats(userId: string, stats: Partial<InsertUserStats>): Promise<UserStats>;\n  getPlatformStats(): Promise<PlatformStats | undefined>;\n  updatePlatformStats(): Promise<PlatformStats>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (userData.googleId) {\n      const existingUser = await this.getUserByGoogleId(userData.googleId);\n      if (existingUser) {\n        const [updatedUser] = await db\n          .update(users)\n          .set({\n            ...userData,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.googleId, userData.googleId))\n          .returning();\n        return updatedUser;\n      }\n    }\n\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Create initial user stats\n    await this.getUserStats(user.id).then(async (stats) => {\n      if (!stats) {\n        await db.insert(userStats).values({ userId: user.id });\n      }\n    });\n    \n    return user;\n  }\n\n  // Food listing operations\n  async getFoodListings(limit = 20): Promise<FoodListing[]> {\n    return await db\n      .select()\n      .from(foodListings)\n      .where(and(eq(foodListings.isActive, true), gte(foodListings.availableUntil, new Date())))\n      .orderBy(desc(foodListings.createdAt))\n      .limit(limit);\n  }\n\n  async getFoodListingById(id: string): Promise<FoodListing | undefined> {\n    const [listing] = await db.select().from(foodListings).where(eq(foodListings.id, id));\n    return listing;\n  }\n\n  async createFoodListing(listing: InsertFoodListing): Promise<FoodListing> {\n    const [newListing] = await db.insert(foodListings).values(listing).returning();\n    \n    // Update user stats\n    await this.updateUserStats(listing.providerId, { totalListings: 1 });\n    \n    return newListing;\n  }\n\n  async updateFoodListing(id: string, listing: Partial<InsertFoodListing>): Promise<FoodListing> {\n    const [updated] = await db\n      .update(foodListings)\n      .set({ ...listing, updatedAt: new Date() })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFoodListing(id: string): Promise<void> {\n    await db.update(foodListings).set({ isActive: false }).where(eq(foodListings.id, id));\n  }\n\n  async getFoodListingsByProvider(providerId: string): Promise<FoodListing[]> {\n    return await db\n      .select()\n      .from(foodListings)\n      .where(eq(foodListings.providerId, providerId))\n      .orderBy(desc(foodListings.createdAt));\n  }\n\n  // Pickup operations\n  async createPickup(pickup: InsertPickup): Promise<Pickup> {\n    const [newPickup] = await db.insert(pickups).values(pickup).returning();\n    \n    // Update user stats\n    await this.updateUserStats(pickup.recipientId, { totalPickups: 1 });\n    \n    return newPickup;\n  }\n\n  async getPickupsByUser(userId: string): Promise<Pickup[]> {\n    return await db\n      .select()\n      .from(pickups)\n      .where(eq(pickups.recipientId, userId))\n      .orderBy(desc(pickups.createdAt));\n  }\n\n  async updatePickupStatus(id: string, status: \"reserved\" | \"completed\" | \"expired\"): Promise<Pickup> {\n    const [updated] = await db\n      .update(pickups)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(pickups.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id));\n  }\n\n  // Statistics operations\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    const [stats] = await db.select().from(userStats).where(eq(userStats.userId, userId));\n    return stats;\n  }\n\n  async updateUserStats(userId: string, statsUpdate: Partial<InsertUserStats>): Promise<UserStats> {\n    const currentStats = await this.getUserStats(userId);\n    \n    if (!currentStats) {\n      const [newStats] = await db.insert(userStats).values({ userId, ...statsUpdate }).returning();\n      return newStats;\n    }\n    \n    const updates: any = { lastUpdated: new Date() };\n    if (statsUpdate.totalFoodSaved) {\n      updates.totalFoodSaved = sql`${userStats.totalFoodSaved} + ${statsUpdate.totalFoodSaved}`;\n    }\n    if (statsUpdate.totalCarbonSaved) {\n      updates.totalCarbonSaved = sql`${userStats.totalCarbonSaved} + ${statsUpdate.totalCarbonSaved}`;\n    }\n    if (statsUpdate.totalPeopleServed) {\n      updates.totalPeopleServed = sql`${userStats.totalPeopleServed} + ${statsUpdate.totalPeopleServed}`;\n    }\n    if (statsUpdate.totalListings) {\n      updates.totalListings = sql`${userStats.totalListings} + ${statsUpdate.totalListings}`;\n    }\n    if (statsUpdate.totalPickups) {\n      updates.totalPickups = sql`${userStats.totalPickups} + ${statsUpdate.totalPickups}`;\n    }\n    \n    const [updated] = await db\n      .update(userStats)\n      .set(updates)\n      .where(eq(userStats.userId, userId))\n      .returning();\n    \n    return updated;\n  }\n\n  async getPlatformStats(): Promise<PlatformStats | undefined> {\n    const [stats] = await db.select().from(platformStats).limit(1);\n    return stats;\n  }\n\n  async updatePlatformStats(): Promise<PlatformStats> {\n    // Calculate current platform statistics\n    const [foodStats] = await db\n      .select({\n        totalFoodSaved: sum(userStats.totalFoodSaved),\n        totalCarbonSaved: sum(userStats.totalCarbonSaved),\n        totalPeopleServed: sum(userStats.totalPeopleServed),\n      })\n      .from(userStats);\n    \n    const [activeListingsCount] = await db\n      .select({ count: count() })\n      .from(foodListings)\n      .where(and(eq(foodListings.isActive, true), gte(foodListings.availableUntil, new Date())));\n    \n    const statsData = {\n      totalFoodSaved: foodStats.totalFoodSaved || \"0\",\n      totalCarbonSaved: foodStats.totalCarbonSaved || \"0\",\n      totalPeopleServed: Number(foodStats.totalPeopleServed) || 0,\n      activeListings: activeListingsCount.count || 0,\n      lastUpdated: new Date(),\n    };\n    \n    // Upsert platform stats\n    const existingStats = await this.getPlatformStats();\n    if (existingStats) {\n      const [updated] = await db\n        .update(platformStats)\n        .set(statsData)\n        .where(eq(platformStats.id, existingStats.id))\n        .returning();\n      return updated;\n    } else {\n      const [newStats] = await db.insert(platformStats).values(statsData).returning();\n      return newStats;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n",
            "size_bytes": 9324
        },
        "server/vite.ts": {
            "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
            "size_bytes": 2263
        },
        "shared/schema.ts": {
            "content": "import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, decimal, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  googleId: text(\"google_id\").unique(),\n  name: text(\"name\").notNull(),\n  profilePicture: text(\"profile_picture\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const foodListings = pgTable(\"food_listings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  providerId: uuid(\"provider_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // meal, snack, beverage, dessert\n  imageUrl: text(\"image_url\"),\n  portions: integer(\"portions\").default(1),\n  location: text(\"location\").notNull(),\n  availableUntil: timestamp(\"available_until\").notNull(),\n  freshnessLevel: text(\"freshness_level\").notNull(), // fresh, good, consume_soon\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const pickups = pgTable(\"pickups\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  listingId: uuid(\"listing_id\").references(() => foodListings.id).notNull(),\n  recipientId: uuid(\"recipient_id\").references(() => users.id).notNull(),\n  status: text(\"status\").notNull().default(\"reserved\"), // reserved, completed, expired\n  scheduledTime: timestamp(\"scheduled_time\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // pickup_reserved, listing_expired, etc\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull().unique(),\n  totalFoodSaved: decimal(\"total_food_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCarbonSaved: decimal(\"total_carbon_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalPeopleServed: integer(\"total_people_served\").default(0),\n  totalListings: integer(\"total_listings\").default(0),\n  totalPickups: integer(\"total_pickups\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const platformStats = pgTable(\"platform_stats\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalFoodSaved: decimal(\"total_food_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCarbonSaved: decimal(\"total_carbon_saved\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalPeopleServed: integer(\"total_people_served\").default(0),\n  activeListings: integer(\"active_listings\").default(0),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFoodListingSchema = createInsertSchema(foodListings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPickupSchema = createInsertSchema(pickups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  lastUpdated: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type FoodListing = typeof foodListings.$inferSelect;\nexport type InsertFoodListing = z.infer<typeof insertFoodListingSchema>;\nexport type Pickup = typeof pickups.$inferSelect;\nexport type InsertPickup = z.infer<typeof insertPickupSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type PlatformStats = typeof platformStats.$inferSelect;\n",
            "size_bytes": 4690
        },
        "client/src/App.tsx": {
            "content": "import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" storageKey=\"ecoshare-ui-theme\">\n      <div className=\"min-h-screen bg-background text-foreground transition-colors duration-300\">\n        <QueryClientProvider client={queryClient}>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </QueryClientProvider>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n",
            "size_bytes": 1086
        },
        "client/src/index.css": {
            "content": "@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light mode colors */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(158, 64%, 51%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 95%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(42, 92%, 56%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(158, 64%, 51%);\n  --radius: 0.75rem;\n  \n  /* Custom EcoShare Colors */\n  --primary-light: hsl(158, 64%, 65%);\n  --primary-dark: hsl(158, 64%, 35%);\n  --surface: hsl(210, 40%, 98%);\n  --surface-light: hsl(210, 40%, 96%);\n  --glassmorphism: hsla(255, 255, 255, 0.8);\n  --glassmorphism-strong: hsla(255, 255, 255, 0.9);\n}\n\n.dark {\n  --background: hsl(210, 25%, 7%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(210, 25%, 9%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(210, 25%, 9%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(158, 64%, 51%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 12%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 25%, 10%);\n  --muted-foreground: hsl(215, 16%, 65%);\n  --accent: hsl(42, 92%, 56%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 25%, 15%);\n  --input: hsl(210, 25%, 15%);\n  --ring: hsl(158, 64%, 51%);\n  \n  /* Dark theme overrides */\n  --surface: hsl(210, 25%, 9%);\n  --surface-light: hsl(210, 25%, 12%);\n  --glassmorphism: hsla(0, 0%, 100%, 0.05);\n  --glassmorphism-strong: hsla(0, 0%, 100%, 0.08);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n\n\n/* Glassmorphism Effects */\n.glass {\n  background: var(--glassmorphism);\n  backdrop-filter: blur(16px);\n  -webkit-backdrop-filter: blur(16px);\n  border: 1px solid var(--border);\n}\n\n.glass-strong {\n  background: var(--glassmorphism-strong);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border: 1px solid hsla(0, 0%, 100%, 0.15);\n}\n\n/* Parallax Background Elements */\n.parallax-bg {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: radial-gradient(circle at 20% 80%, hsla(199, 89%, 24%, 0.3) 0%, transparent 50%),\n              radial-gradient(circle at 80% 20%, hsla(158, 64%, 51%, 0.2) 0%, transparent 50%);\n}\n\n.dark .parallax-bg {\n  background: radial-gradient(circle at 20% 80%, hsla(199, 89%, 15%, 0.4) 0%, transparent 50%),\n              radial-gradient(circle at 80% 20%, hsla(158, 64%, 35%, 0.3) 0%, transparent 50%);\n}\n\n/* Custom Animations */\n.animate-on-scroll {\n  opacity: 0;\n  transform: translateY(30px);\n  transition: all 0.8s ease-out;\n}\n\n.animate-on-scroll.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* Food Emojis 3D Effect */\n.food-emoji {\n  font-size: 2.5rem;\n  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));\n  transition: all 0.3s ease;\n  position: absolute;\n  user-select: none;\n  pointer-events: none;\n}\n\n.food-emoji:hover {\n  transform: scale(1.1) rotate(5deg);\n}\n\n/* Animation keyframes */\n@keyframes border-flow {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  25% { transform: translateY(-10px) rotate(2deg); }\n  50% { transform: translateY(-20px) rotate(0deg); }\n  75% { transform: translateY(-10px) rotate(-2deg); }\n}\n\n@keyframes pulse-glow {\n  0%, 100% { box-shadow: 0 0 20px rgba(52, 211, 153, 0.3); }\n  50% { box-shadow: 0 0 30px rgba(52, 211, 153, 0.6), 0 0 40px rgba(52, 211, 153, 0.2); }\n}\n\n@keyframes gradient-x {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes parallax-float {\n  0%, 100% { transform: translateY(0px) translateX(0px); }\n  25% { transform: translateY(-15px) translateX(5px); }\n  50% { transform: translateY(-30px) translateX(0px); }\n  75% { transform: translateY(-15px) translateX(-5px); }\n}\n\n/* Utility classes */\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 3s ease-in-out infinite;\n}\n\n.animate-gradient-x {\n  animation: gradient-x 3s ease infinite;\n}\n\n.animate-parallax-float {\n  animation: parallax-float 8s ease-in-out infinite;\n}\n\n/* Gemini branding effects */\n.gemini-badge {\n  background: linear-gradient(45deg, #4285f4, #34a853, #fbbc05, #ea4335);\n  background-size: 200% 200%;\n  animation: gradient-x 3s ease infinite;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  font-weight: 600;\n}\n\n/* Parallax scrolling effects */\n.parallax-element {\n  will-change: transform;\n}\n\n/* Enhanced glass effects */\n.glass {\n  background: var(--glassmorphism);\n  backdrop-filter: blur(16px);\n  -webkit-backdrop-filter: blur(16px);\n  border: 1px solid var(--border);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.glass-strong {\n  background: var(--glassmorphism-strong);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border: 1px solid var(--border);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n.food-emoji:hover {\n  transform: scale(1.2) rotateY(15deg);\n}\n\n/* Button Hover Effects */\n.btn-primary {\n  background: linear-gradient(135deg, hsl(158, 64%, 51%) 0%, hsl(158, 64%, 45%) 100%);\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px hsla(158, 64%, 51%, 0.3);\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px hsla(158, 64%, 51%, 0.4);\n}\n\n/* Statistics Counter Animation */\n.stat-number {\n  font-variant-numeric: tabular-nums;\n}\n\n/* Loading Skeleton */\n.skeleton {\n  background: linear-gradient(90deg, \n    hsla(0, 0%, 100%, 0.05) 25%, \n    hsla(0, 0%, 100%, 0.1) 50%, \n    hsla(0, 0%, 100%, 0.05) 75%\n  );\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n}\n\n/* Keyframes */\n@keyframes border-flow {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n@keyframes loading {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes counter {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slide-up {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n/* Animation Classes */\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-counter {\n  animation: counter 2s ease-out forwards;\n}\n\n.animate-slide-up {\n  animation: slide-up 0.8s ease-out forwards;\n}\n\n.animate-fade-in {\n  animation: fade-in 0.6s ease-out forwards;\n}\n\n/* RGB Light Bar for Navbar - Google AI Style */\n@keyframes rgb-light {\n  0% {\n    background: linear-gradient(90deg, \n      rgba(59, 130, 246, 0.9) 0%,\n      rgba(147, 51, 234, 0.9) 25%,\n      rgba(239, 68, 68, 0.9) 50%,\n      rgba(16, 185, 129, 0.9) 75%,\n      rgba(59, 130, 246, 0.9) 100%\n    );\n    background-size: 400% 100%;\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background: linear-gradient(90deg, \n      rgba(59, 130, 246, 0.9) 0%,\n      rgba(147, 51, 234, 0.9) 25%,\n      rgba(239, 68, 68, 0.9) 50%,\n      rgba(16, 185, 129, 0.9) 75%,\n      rgba(59, 130, 246, 0.9) 100%\n    );\n    background-size: 400% 100%;\n    background-position: 0% 50%;\n  }\n}\n\n.rgb-light-bar {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, \n    rgba(59, 130, 246, 0.9) 0%,\n    rgba(147, 51, 234, 0.9) 25%,\n    rgba(239, 68, 68, 0.9) 50%,\n    rgba(16, 185, 129, 0.9) 75%,\n    rgba(59, 130, 246, 0.9) 100%\n  );\n  background-size: 400% 100%;\n  animation: rgb-light 4s ease-in-out infinite;\n}\n\n\n",
            "size_bytes": 8508
        },
        "client/src/main.tsx": {
            "content": "import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
            "size_bytes": 157
        },
        "server/services/gemini.ts": {
            "content": "import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { env } from \"../env\";\n\nconst genAI = new GoogleGenerativeAI(env.GOOGLE_AI_API_KEY || \"\");\n\nexport interface FoodAnalysis {\n  category: string;\n  freshnessLevel: \"fresh\" | \"good\" | \"consume_soon\";\n  portions: number;\n  confidence: number;\n  title: string;\n  description: string;\n  safetyAssessment: string;\n}\n\nexport async function analyzeFoodImage(imageBase64: string, mimeType: string): Promise<FoodAnalysis> {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: \"gemini-2.0-flash-exp\",\n      generationConfig: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            title: { type: \"string\" },\n            description: { type: \"string\" },\n            category: { \n              type: \"string\",\n              enum: [\"meal\", \"snack\", \"beverage\", \"dessert\", \"produce\", \"baked_goods\"]\n            },\n            freshnessLevel: {\n              type: \"string\", \n              enum: [\"fresh\", \"good\", \"consume_soon\"]\n            },\n            portions: { type: \"number\" },\n            confidence: { type: \"number\" },\n            safetyAssessment: { type: \"string\" }\n          },\n          required: [\"title\", \"description\", \"category\", \"freshnessLevel\", \"portions\", \"confidence\", \"safetyAssessment\"]\n        } as any\n      }\n    });\n\n    const prompt = `Analyze this food image and provide:\n    1. A concise, appetizing title (e.g. \"Fresh Garden Salad\", \"Homemade Chocolate Cookies\")\n    2. A brief description mentioning key ingredients/characteristics\n    3. Category: meal, snack, beverage, dessert, produce, or baked_goods\n    4. Freshness level: fresh (excellent condition), good (safe to eat), consume_soon (eat within hours)\n    5. Estimated number of servings/portions\n    6. Confidence score (0-1) in your analysis\n    7. Safety assessment noting any concerns or \"Safe for consumption\"\n    \n    Focus on food safety and accurate categorization for a campus food sharing platform.`;\n\n    const result = await model.generateContent([\n      {\n        inlineData: {\n          data: imageBase64,\n          mimeType: mimeType\n        }\n      },\n      prompt\n    ]);\n\n    const response = await result.response;\n    const analysis = JSON.parse(response.text());\n    \n    return analysis;\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    throw new Error(\"Failed to analyze food image\");\n  }\n}\n\nexport async function generateFoodRecommendations(userPreferences: string[]): Promise<string[]> {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash-exp\" });\n    \n    const prompt = `Based on these food preferences: ${userPreferences.join(\", \")}, \n    suggest 5 specific food items that someone might want to share on a campus food platform. \n    Return only a JSON array of food names, like [\"Vegetarian Pasta Salad\", \"Fresh Fruit Bowl\", etc.]`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    \n    return JSON.parse(response.text());\n  } catch (error) {\n    console.error(\"Failed to generate recommendations:\", error);\n    return [];\n  }\n}\n",
            "size_bytes": 3202
        },
        "client/src/components/auth-hero.tsx": {
            "content": "import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useRef } from \"react\";\n\nexport function AuthHero() {\n  const { loginWithGoogle, loginWithDemo, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation(\"/dashboard\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  useEffect(() => {\n    const observerOptions = {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    };\n\n    observerRef.current = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('visible');\n        }\n      });\n    }, observerOptions);\n\n    document.querySelectorAll('.animate-on-scroll').forEach(el => {\n      observerRef.current?.observe(el);\n    });\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  return (\n    <>\n      {/* Parallax Background */}\n      <div className=\"parallax-bg fixed inset-0 z-0\" />\n      \n      <section className=\"relative min-h-screen flex items-center justify-center px-6 py-20\">\n        <div className=\"max-w-6xl mx-auto text-center relative z-10\">\n          \n          {/* Floating Food Elements - Better positioned */}\n          <div className=\"absolute top-10 left-10 md:left-20 food-emoji animate-float\" style={{animationDelay: '0s'}}>🥗</div>\n          <div className=\"absolute top-20 right-10 md:right-20 food-emoji animate-float\" style={{animationDelay: '1s'}}>🍎</div>\n          <div className=\"absolute bottom-20 left-16 md:left-32 food-emoji animate-float\" style={{animationDelay: '2s'}}>📦</div>\n          <div className=\"absolute bottom-32 right-16 md:right-32 food-emoji animate-float\" style={{animationDelay: '3s'}}>🌱</div>\n          <div className=\"absolute top-1/3 left-8 md:left-12 food-emoji animate-float\" style={{animationDelay: '4s'}}>🥕</div>\n          <div className=\"absolute top-1/2 right-8 md:right-12 food-emoji animate-float\" style={{animationDelay: '5s'}}>🍞</div>\n          \n          <div className=\"animate-on-scroll\">\n            <h1 className=\"text-6xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-primary via-blue-400 to-purple-400 bg-clip-text text-transparent leading-tight\">\n              Save Planet.\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto leading-relaxed\">\n              AI-powered campus food sharing platform that connects communities, \n              reduces waste, and feeds everyone. Join the sustainability revolution.\n            </p>\n            \n            {/* Powered by Gemini Badge */}\n            <div className=\"flex items-center justify-center mb-12\">\n              <div className=\"glass-strong px-6 py-3 rounded-full border-2 border-primary/20 animate-pulse-glow\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-full animate-gradient-x\"></div>\n                  <span className=\"gemini-badge text-sm font-semibold\">Powered by Google Gemini AI</span>\n                  <div className=\"w-6 h-6 bg-gradient-to-r from-green-500 via-blue-500 to-purple-500 rounded-full animate-gradient-x\" style={{animationDelay: '1s'}}></div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n              <Button \n                onClick={loginWithGoogle}\n                className=\"btn-primary px-8 py-4 rounded-xl font-semibold text-lg flex items-center justify-center space-x-3 min-w-[200px]\"\n              >\n                <svg className=\"w-6 h-6\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                </svg>\n                <span>Continue with Google</span>\n              </Button>\n              \n              <Button \n                onClick={loginWithDemo}\n                variant=\"outline\"\n                className=\"px-8 py-4 rounded-xl font-semibold text-lg flex items-center justify-center space-x-3 min-w-[200px] glass-strong hover:bg-primary hover:text-white transition-all\"\n              >\n                <span className=\"text-2xl\">👤</span>\n                <span>Try Demo Account</span>\n              </Button>\n            </div>\n            \n            {/* Key Benefits Grid */}\n            <div className=\"grid md:grid-cols-3 gap-6 mt-20\">\n              <div className=\"glass p-8 rounded-2xl hover:bg-surface-light transition-all transform hover:scale-105\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">🧠</span>\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 text-primary\">AI-Powered</h3>\n                <p className=\"text-muted-foreground text-sm leading-relaxed\">Smart categorization and freshness assessment</p>\n              </div>\n              \n              <div className=\"glass p-8 rounded-2xl hover:bg-surface-light transition-all transform hover:scale-105\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">👥</span>\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 text-purple-400\">Community Driven</h3>\n                <p className=\"text-muted-foreground text-sm leading-relaxed\">Connect campus food providers and recipients</p>\n              </div>\n              \n              <div className=\"glass p-8 rounded-2xl hover:bg-surface-light transition-all transform hover:scale-105\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-teal-500 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">📈</span>\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 text-green-400\">Impact Tracking</h3>\n                <p className=\"text-muted-foreground text-sm leading-relaxed\">Monitor your environmental contribution</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n",
            "size_bytes": 6616
        },
        "client/src/components/create-listing-dialog.tsx": {
            "content": "import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst createListingSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  category: z.enum([\"meal\", \"snack\", \"beverage\", \"dessert\", \"produce\", \"baked_goods\"]),\n  portions: z.number().min(1, \"At least 1 portion required\"),\n  location: z.string().min(1, \"Location is required\"),\n  availableUntil: z.string().min(1, \"Availability time is required\"),\n  freshnessLevel: z.enum([\"fresh\", \"good\", \"consume_soon\"]),\n});\n\ntype CreateListingForm = z.infer<typeof createListingSchema>;\n\nexport function CreateListingDialog() {\n  const [open, setOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateListingForm>({\n    resolver: zodResolver(createListingSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"meal\",\n      portions: 1,\n      location: \"\",\n      availableUntil: \"\",\n      freshnessLevel: \"fresh\",\n    },\n  });\n\n  const createListingMutation = useMutation({\n    mutationFn: async (data: CreateListingForm) => {\n      const formData = new FormData();\n      \n      // Convert availableUntil to proper ISO string\n      const availableUntil = new Date(data.availableUntil).toISOString();\n      \n      formData.append(\"data\", JSON.stringify({\n        ...data,\n        availableUntil,\n      }));\n      \n      if (selectedFile) {\n        formData.append(\"image\", selectedFile);\n      }\n\n      const response = await fetch(\"/api/food-listings\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Food listing created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-listings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-listings\"] });\n      setOpen(false);\n      form.reset();\n      setSelectedFile(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create listing: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateListingForm) => {\n    createListingMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"btn-primary px-6 py-2 rounded-lg font-medium\">\n          + Add Listing\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"glass-strong border-border max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Create Food Listing</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Title</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      className=\"bg-surface border-border text-white\"\n                      placeholder=\"e.g., Fresh Garden Salad\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      className=\"bg-surface border-border text-white\"\n                      placeholder=\"Describe your food...\"\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Category</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-surface border-border text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"glass-strong border-border\">\n                        <SelectItem value=\"meal\">Meal</SelectItem>\n                        <SelectItem value=\"snack\">Snack</SelectItem>\n                        <SelectItem value=\"beverage\">Beverage</SelectItem>\n                        <SelectItem value=\"dessert\">Dessert</SelectItem>\n                        <SelectItem value=\"produce\">Produce</SelectItem>\n                        <SelectItem value=\"baked_goods\">Baked Goods</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"portions\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Portions</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\"\n                        min=\"1\"\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        className=\"bg-surface border-border text-white\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Location</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      className=\"bg-surface border-border text-white\"\n                      placeholder=\"e.g., Student Center, Room 201\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"availableUntil\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Available Until</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"datetime-local\"\n                        className=\"bg-surface border-border text-white\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"freshnessLevel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Freshness</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-surface border-border text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"glass-strong border-border\">\n                        <SelectItem value=\"fresh\">Fresh</SelectItem>\n                        <SelectItem value=\"good\">Good</SelectItem>\n                        <SelectItem value=\"consume_soon\">Consume Soon</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div>\n              <FormLabel className=\"text-white\">Photo (Optional)</FormLabel>\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}\n                className=\"mt-2 bg-surface border-border text-white file:bg-surface file:text-white file:border-0\"\n              />\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                className=\"flex-1 border-border text-white hover:bg-surface\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createListingMutation.isPending}\n                className=\"flex-1 btn-primary\"\n              >\n                {createListingMutation.isPending ? \"Creating...\" : \"Create Listing\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "size_bytes": 10569
        },
        "client/src/components/food-listing-card.tsx": {
            "content": "import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport type { FoodListing } from \"@shared/schema\";\n\ninterface FoodListingCardProps {\n  listing: FoodListing;\n  onReserve?: (listingId: string) => void;\n  isLoading?: boolean;\n}\n\nexport function FoodListingCard({ listing, onReserve, isLoading }: FoodListingCardProps) {\n  const getFreshnessColor = (level: string) => {\n    switch (level) {\n      case \"fresh\": return \"bg-green-500\";\n      case \"good\": return \"bg-yellow-500\";\n      case \"consume_soon\": return \"bg-red-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getFreshnessText = (level: string) => {\n    switch (level) {\n      case \"fresh\": return \"Fresh\";\n      case \"good\": return \"Good\";\n      case \"consume_soon\": return \"Consume Soon\";\n      default: return \"Unknown\";\n    }\n  };\n\n  return (\n    <Card className=\"glass-strong rounded-2xl overflow-hidden hover:bg-surface-light transition-all transform hover:scale-105 cursor-pointer animate-on-scroll\">\n      {listing.imageUrl && (\n        <img \n          src={listing.imageUrl} \n          alt={listing.title}\n          className=\"w-full h-48 object-cover\"\n        />\n      )}\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-lg font-semibold text-white\">{listing.title}</h3>\n          <Badge className={`${getFreshnessColor(listing.freshnessLevel)} text-white text-xs px-2 py-1 rounded-full border-0`}>\n            {getFreshnessText(listing.freshnessLevel)}\n          </Badge>\n        </div>\n        <p className=\"text-gray-300 text-sm mb-4\">{listing.description}</p>\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-400\">📍 {listing.location}</span>\n          <span className=\"text-primary font-medium\">{listing.portions} portions</span>\n        </div>\n      </CardContent>\n      {onReserve && (\n        <CardFooter className=\"p-6 pt-0\">\n          <Button \n            onClick={() => onReserve(listing.id)}\n            disabled={isLoading}\n            className=\"w-full btn-primary\"\n          >\n            {isLoading ? \"Reserving...\" : \"Reserve\"}\n          </Button>\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n",
            "size_bytes": 2351
        },
        "client/src/components/navigation.tsx": {
            "content": "import { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function Navigation() {\n  const { user, isAuthenticated, loginWithGoogle, logout } = useAuth();\n\n  return (\n    <nav className=\"relative z-50 glass\">\n      <div className=\"max-w-7xl mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-primary-dark rounded-xl flex items-center justify-center\">\n                <span className=\"text-xl\">🌱</span>\n              </div>\n              <span className=\"text-xl font-bold\">EcoShare</span>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            {isAuthenticated && (\n              <Link href=\"/dashboard\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                Dashboard\n              </Link>\n            )}\n            <button \n              onClick={() => {\n                document.querySelector('#features')?.scrollIntoView({ behavior: 'smooth' });\n              }}\n              className=\"text-muted-foreground hover:text-primary transition-colors\"\n            >\n              Features\n            </button>\n            <button \n              onClick={() => {\n                document.querySelector('#impact')?.scrollIntoView({ behavior: 'smooth' });\n              }}\n              className=\"text-muted-foreground hover:text-primary transition-colors\"\n            >\n              Impact\n            </button>\n            <button \n              onClick={() => {\n                document.querySelector('#algorithm-details')?.scrollIntoView({ behavior: 'smooth' });\n              }}\n              className=\"text-muted-foreground hover:text-primary transition-colors\"\n            >\n              Algorithm\n            </button>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <ThemeToggle />\n            {!isAuthenticated ? (\n              <Button onClick={loginWithGoogle} className=\"bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg font-medium flex items-center space-x-2 animate-pulse-glow\">\n                <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M12 0C5.27 0 0 5.27 0 12s5.27 12 12 12c6.73 0 12-5.27 12-12S18.73 0 12 0z\"/>\n                </svg>\n                <span>Sign In with Google</span>\n              </Button>\n            ) : (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.profilePicture || undefined} alt={user?.name} />\n                      <AvatarFallback>{user?.name?.charAt(0)?.toUpperCase()}</AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56 glass-strong border-border\" align=\"end\" forceMount>\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {user?.name}\n                        {user?.email === \"demo@ecoshare.app\" && (\n                          <span className=\"ml-2 px-2 py-1 text-xs bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-300 rounded-full\">\n                            Demo Mode\n                          </span>\n                        )}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator className=\"bg-border\" />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\">\n                      <span className=\"w-full cursor-pointer text-foreground hover:bg-surface\">Dashboard</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  {user?.email === \"demo@ecoshare.app\" && (\n                    <>\n                      <DropdownMenuSeparator className=\"bg-border\" />\n                      <DropdownMenuItem onClick={logout} className=\"cursor-pointer text-orange-600 dark:text-orange-400 hover:bg-orange-50 dark:hover:bg-orange-900/20\">\n                        <span className=\"flex items-center space-x-2\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                          </svg>\n                          <span>Exit Demo Mode</span>\n                        </span>\n                      </DropdownMenuItem>\n                    </>\n                  )}\n                  <DropdownMenuSeparator className=\"bg-border\" />\n                  <DropdownMenuItem onClick={logout} className=\"cursor-pointer text-foreground hover:bg-surface\">\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </div>\n        </div>\n      </div>\n      {/* RGB Light Bar - Google AI Style */}\n      <div className=\"rgb-light-bar\"></div>\n    </nav>\n  );\n}\n",
            "size_bytes": 6334
        },
        "client/src/components/platform-stats.tsx": {
            "content": "import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useRef } from \"react\";\nimport type { PlatformStats } from \"@shared/schema\";\n\nexport function PlatformStatsSection() {\n  const { data: stats, isLoading } = useQuery<PlatformStats>({\n    queryKey: [\"/api/stats/platform\"],\n  });\n\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const hasAnimated = useRef(false);\n\n  useEffect(() => {\n    const observerOptions = {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    };\n\n    observerRef.current = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && !hasAnimated.current) {\n          entry.target.classList.add('visible');\n          \n          // Trigger counter animation for stat numbers\n          const statNumbers = entry.target.querySelectorAll('.stat-number');\n          statNumbers.forEach((element: any) => {\n            animateCounter(element);\n          });\n          \n          hasAnimated.current = true;\n        }\n      });\n    }, observerOptions);\n\n    const section = document.querySelector('.stats-section');\n    if (section) {\n      observerRef.current.observe(section);\n    }\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  const animateCounter = (element: HTMLElement) => {\n    const target = parseInt(element.getAttribute('data-target') || '0');\n    const duration = 2000;\n    const startTime = performance.now();\n    \n    function updateCounter(currentTime: number) {\n      const elapsedTime = currentTime - startTime;\n      const progress = Math.min(elapsedTime / duration, 1);\n      \n      // Easing function\n      const easeOutCubic = 1 - Math.pow(1 - progress, 3);\n      const currentValue = Math.floor(target * easeOutCubic);\n      \n      element.textContent = currentValue.toLocaleString();\n      \n      if (progress < 1) {\n        requestAnimationFrame(updateCounter);\n      }\n    }\n    \n    requestAnimationFrame(updateCounter);\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"relative py-20 px-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <div className=\"skeleton h-12 w-96 mx-auto mb-4 rounded-lg\" />\n            <div className=\"skeleton h-6 w-64 mx-auto rounded-lg\" />\n          </div>\n          <div className=\"grid md:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"glass-strong p-8 rounded-2xl\">\n                <div className=\"skeleton h-12 w-20 mx-auto mb-4 rounded-lg\" />\n                <div className=\"skeleton h-4 w-32 mx-auto mb-2 rounded-lg\" />\n                <div className=\"skeleton h-3 w-24 mx-auto rounded-lg\" />\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const foodSaved = parseFloat(stats?.totalFoodSaved || \"0\");\n  const carbonSaved = parseFloat(stats?.totalCarbonSaved || \"0\");\n\n  return (\n    <section id=\"impact\" className=\"relative py-20 px-6 stats-section animate-on-scroll\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-foreground\">Platform Impact</h2>\n          <p className=\"text-xl text-muted-foreground\">Real-time environmental impact powered by our AI analytics</p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-4 gap-6\">\n          <div className=\"glass-strong p-8 rounded-2xl text-center hover:bg-surface-light transition-all\">\n            <div className=\"text-4xl font-bold text-primary mb-2 stat-number\" data-target={Math.floor(foodSaved)}>0</div>\n            <div className=\"text-sm text-muted-foreground mb-1\">kg Food Saved</div>\n            <div className=\"flex items-center justify-center text-xs text-green-400\">\n              <span className=\"mr-1\">↗</span>\n              <span>Growing daily</span>\n            </div>\n          </div>\n          \n          <div className=\"glass-strong p-8 rounded-2xl text-center hover:bg-surface-light transition-all\">\n            <div className=\"text-4xl font-bold text-blue-400 mb-2 stat-number\" data-target={Math.floor(carbonSaved)}>0</div>\n            <div className=\"text-sm text-muted-foreground mb-1\">kg CO₂ Prevented</div>\n            <div className=\"flex items-center justify-center text-xs text-green-400\">\n              <span className=\"mr-1\">↗</span>\n              <span>Carbon impact</span>\n            </div>\n          </div>\n          \n          <div className=\"glass-strong p-8 rounded-2xl text-center hover:bg-surface-light transition-all\">\n            <div className=\"text-4xl font-bold text-accent mb-2 stat-number\" data-target={stats?.totalPeopleServed || 0}>0</div>\n            <div className=\"text-sm text-gray-400 mb-1\">People Served</div>\n            <div className=\"flex items-center justify-center text-xs text-green-400\">\n              <span className=\"mr-1\">↗</span>\n              <span>Community fed</span>\n            </div>\n          </div>\n          \n          <div className=\"glass-strong p-8 rounded-2xl text-center hover:bg-surface-light transition-all\">\n            <div className=\"text-4xl font-bold text-purple-400 mb-2 stat-number\" data-target={stats?.activeListings || 0}>0</div>\n            <div className=\"text-sm text-gray-400 mb-1\">Active Listings</div>\n            <div className=\"flex items-center justify-center text-xs text-green-400\">\n              <span className=\"mr-1\">↗</span>\n              <span>Available now</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n",
            "size_bytes": 5622
        },
        "client/src/hooks/use-auth.ts": {
            "content": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/auth/logout\"),\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.clear();\n      window.location.href = \"/\";\n    },\n  });\n\n  const loginWithGoogle = () => {\n    window.location.href = \"/api/auth/google\";\n  };\n\n  const loginWithDemo = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/auth/demo\"),\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/me\"], user);\n      queryClient.invalidateQueries();\n    },\n  });\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    loginWithGoogle,\n    loginWithDemo: loginWithDemo.mutate,\n    logout,\n    error,\n  };\n}\n",
            "size_bytes": 1158
        },
        "client/src/hooks/use-mobile.tsx": {
            "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
            "size_bytes": 565
        },
        "client/src/hooks/use-toast.ts": {
            "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
            "size_bytes": 3895
        },
        "client/src/lib/queryClient.ts": {
            "content": "import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n",
            "size_bytes": 1388
        },
        "client/src/lib/utils.ts": {
            "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
            "size_bytes": 166
        },
        "client/src/pages/dashboard.tsx": {
            "content": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { ViewportBorder } from \"@/components/ui/viewport-border\";\nimport { FoodListingCard } from \"@/components/food-listing-card\";\nimport { CreateListingDialog } from \"@/components/create-listing-dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { FoodListing, UserStats, Pickup } from \"@shared/schema\";\nimport { useEffect } from \"react\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      window.location.href = \"/\";\n    }\n  }, [isAuthenticated]);\n\n  const { data: foodListings = [], isLoading: listingsLoading } = useQuery<FoodListing[]>({\n    queryKey: [\"/api/food-listings\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: myListings = [] } = useQuery<FoodListing[]>({\n    queryKey: [\"/api/my-listings\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: myPickups = [] } = useQuery<Pickup[]>({\n    queryKey: [\"/api/my-pickups\"], \n    enabled: isAuthenticated,\n  });\n\n  const { data: userStats } = useQuery<UserStats>({\n    queryKey: [\"/api/stats/user\"],\n    enabled: isAuthenticated,\n  });\n\n  const reserveFoodMutation = useMutation({\n    mutationFn: (listingId: string) => \n      apiRequest(\"POST\", \"/api/pickups\", { listingId }),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Food reserved successfully! Check your pickups tab.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-pickups\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to reserve food: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReserveFood = (listingId: string) => {\n    reserveFoodMutation.mutate(listingId);\n  };\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <ViewportBorder />\n      <div className=\"relative z-10\">\n        <Navigation />\n        \n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n          {/* Welcome Section */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-white mb-2\">\n              Welcome back, {user?.name}! 👋\n            </h1>\n            <p className=\"text-gray-300\">\n              Track your impact, share food, and connect with your community.\n            </p>\n          </div>\n\n          {/* Stats Cards */}\n          {userStats && (\n            <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"glass-strong border-border\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">Food Saved</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {parseFloat(userStats.totalFoodSaved || \"0\").toFixed(1)}kg\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glass-strong border-border\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">CO₂ Prevented</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-400\">\n                    {parseFloat(userStats.totalCarbonSaved || \"0\").toFixed(1)}kg\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glass-strong border-border\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">Total Listings</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-accent\">\n                    {userStats.totalListings}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glass-strong border-border\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">Total Pickups</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-purple-400\">\n                    {userStats.totalPickups}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Main Content Tabs */}\n          <Tabs defaultValue=\"browse\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <TabsList className=\"glass border-border\">\n                <TabsTrigger value=\"browse\" className=\"data-[state=active]:bg-primary data-[state=active]:text-white\">\n                  Browse Food\n                </TabsTrigger>\n                <TabsTrigger value=\"my-listings\" className=\"data-[state=active]:bg-primary data-[state=active]:text-white\">\n                  My Listings ({myListings.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"pickups\" className=\"data-[state=active]:bg-primary data-[state=active]:text-white\">\n                  My Pickups ({myPickups.length})\n                </TabsTrigger>\n              </TabsList>\n              \n              <CreateListingDialog />\n            </div>\n\n            <TabsContent value=\"browse\" className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-2xl font-bold text-white\">Available Food</h2>\n                <p className=\"text-gray-300\">{foodListings.length} items available</p>\n              </div>\n              \n              {listingsLoading ? (\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(6)].map((_, i) => (\n                    <div key={i} className=\"glass-strong rounded-2xl p-6\">\n                      <div className=\"skeleton h-48 w-full mb-4 rounded-xl\" />\n                      <div className=\"skeleton h-6 w-3/4 mb-2 rounded\" />\n                      <div className=\"skeleton h-4 w-full mb-4 rounded\" />\n                      <div className=\"flex justify-between\">\n                        <div className=\"skeleton h-4 w-24 rounded\" />\n                        <div className=\"skeleton h-4 w-16 rounded\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {foodListings.map((listing) => (\n                    <FoodListingCard\n                      key={listing.id}\n                      listing={listing}\n                      onReserve={handleReserveFood}\n                      isLoading={reserveFoodMutation.isPending}\n                    />\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"my-listings\" className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-white\">My Food Listings</h2>\n              \n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {myListings.map((listing) => (\n                  <FoodListingCard\n                    key={listing.id}\n                    listing={listing}\n                  />\n                ))}\n                {myListings.length === 0 && (\n                  <div className=\"col-span-full text-center py-12\">\n                    <p className=\"text-gray-300 mb-4\">You haven't created any listings yet.</p>\n                    <CreateListingDialog />\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"pickups\" className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-white\">My Pickups</h2>\n              \n              <div className=\"space-y-4\">\n                {myPickups.map((pickup) => (\n                  <Card key={pickup.id} className=\"glass-strong border-border\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-medium text-white\">Pickup #{pickup.id.slice(0, 8)}</h3>\n                          <p className=\"text-sm text-gray-300\">Reserved on {new Date(pickup.createdAt!).toLocaleDateString()}</p>\n                        </div>\n                        <Badge \n                          variant={pickup.status === \"completed\" ? \"default\" : \"secondary\"}\n                          className={pickup.status === \"completed\" ? \"bg-green-500\" : \"bg-yellow-500\"}\n                        >\n                          {pickup.status}\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                {myPickups.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <p className=\"text-gray-300\">No pickups yet. Start browsing available food!</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
            "size_bytes": 9809
        },
        "client/src/pages/home.tsx": {
            "content": "import { Navigation } from \"@/components/navigation\";\nimport { AuthHero } from \"@/components/auth-hero\";\nimport { PlatformStatsSection } from \"@/components/platform-stats\";\nimport { ParallaxContainer, ParallaxElement } from \"@/components/parallax-container\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground overflow-x-hidden\">\n      <div className=\"relative z-10\">\n        <Navigation />\n        <ParallaxContainer speed={0.2}>\n          <AuthHero />\n        </ParallaxContainer>\n        \n        <ParallaxElement speed={0.1}>\n          <PlatformStatsSection />\n        </ParallaxElement>\n        \n        {/* AI Features Showcase */}\n        <section id=\"features\" className=\"relative py-20 px-6 bg-gradient-to-b from-transparent to-surface/20\">\n          <div className=\"max-w-6xl mx-auto\">\n            <ParallaxElement speed={0.15} className=\"text-center mb-16 animate-on-scroll\">\n              <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-foreground\">\n                <span className=\"gemini-badge\">Powered by Google Gemini AI</span>\n              </h2>\n              <p className=\"text-xl text-muted-foreground\">Advanced AI capabilities that make food sharing smarter, safer, and more sustainable</p>\n            </ParallaxElement>\n            \n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div className=\"space-y-8 animate-on-scroll\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-green-400 rounded-xl flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-xl\">🧠</span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold mb-2 text-foreground\">Smart Food Categorization</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\">AI automatically categorizes food items into meals, snacks, beverages, and more for better organization.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center flex-shrink-0 animate-pulse-glow\">\n                    <span className=\"text-xl\">🌡️</span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold mb-2 text-foreground\">Freshness Assessment</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\">Real-time freshness evaluation with safety recommendations and optimal consumption timeframes.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center flex-shrink-0 animate-gradient-x\">\n                    <span className=\"text-xl\">⚡</span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold mb-2 text-foreground\">Instant Processing</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\">Lightning-fast analysis of food images with immediate categorization and safety insights.</p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* AI Analysis Preview Card */}\n              <ParallaxElement speed={0.08} className=\"glass-strong rounded-2xl p-6 animate-on-scroll\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">AI Analysis Preview</h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                    <span className=\"text-xs text-green-400 font-medium\">Live Processing</span>\n                  </div>\n                </div>\n                \n                <img \n                  src=\"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                  alt=\"Homemade vegetable lasagna\" \n                  className=\"w-full h-48 object-cover rounded-xl mb-4\" \n                />\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-foreground font-medium\">Homemade Vegetable Lasagna</span>\n                    <span className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full\">Fresh</span>\n                  </div>\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    <div className=\"mb-2\"><strong>Category:</strong> Main Course • Italian</div>\n                    <div className=\"mb-2\"><strong>Portions:</strong> 6-8 servings</div>\n                    <div className=\"mb-2\"><strong>Best By:</strong> Within 2 days (refrigerated)</div>\n                    <div><strong>Safety:</strong> ✅ Safe for consumption</div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between pt-3 border-t border-border\">\n                    <div className=\"text-xs text-muted-foreground\">Analyzed by Gemini AI</div>\n                    <div className=\"text-xs text-primary font-medium\">95% Confidence</div>\n                  </div>\n                </div>\n              </ParallaxElement>\n            </div>\n          </div>\n        </section>\n\n        {/* How It Works Section */}\n        <section id=\"how-it-works\" className=\"relative py-20 px-6\">\n          <ParallaxElement speed={0.1}>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-16 animate-on-scroll\">\n                <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-foreground\">How EcoShare Works</h2>\n                <p className=\"text-xl text-muted-foreground\">Simple, secure, and sustainable food sharing in just three steps</p>\n              </div>\n              \n              <div className=\"grid md:grid-cols-3 gap-12\">\n                <div className=\"text-center animate-on-scroll\">\n                  <div className=\"relative mb-8\">\n                    <div className=\"w-20 h-20 bg-gradient-to-r from-primary to-green-400 rounded-2xl flex items-center justify-center mx-auto animate-float\">\n                      <span className=\"text-3xl\">📱</span>\n                    </div>\n                    <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-bold text-accent-foreground\">1</span>\n                    </div>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-foreground\">List Surplus Food</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\">Snap a photo of your surplus food. Our AI automatically categorizes and assesses freshness for safe sharing.</p>\n                </div>\n                \n                <div className=\"text-center animate-on-scroll\" style={{animationDelay: '0.2s'}}>\n                  <div className=\"relative mb-8\">\n                    <div className=\"w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl flex items-center justify-center mx-auto animate-float\" style={{animationDelay: '1s'}}>\n                      <span className=\"text-3xl\">🔍</span>\n                    </div>\n                    <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-bold text-accent-foreground\">2</span>\n                    </div>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-foreground\">Browse & Reserve</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\">Discover available food near you. Filter by category, location, and freshness. Reserve items with one tap.</p>\n                </div>\n                \n                <div className=\"text-center animate-on-scroll\" style={{animationDelay: '0.4s'}}>\n                  <div className=\"relative mb-8\">\n                    <div className=\"w-20 h-20 bg-gradient-to-r from-green-500 to-teal-500 rounded-2xl flex items-center justify-center mx-auto animate-float\" style={{animationDelay: '2s'}}>\n                      <span className=\"text-3xl\">🤝</span>\n                    </div>\n                    <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-bold text-accent-foreground\">3</span>\n                    </div>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-foreground\">Pickup & Impact</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\">Coordinate pickup with providers. Track your environmental impact and contribution to campus sustainability.</p>\n                </div>\n              </div>\n            </div>\n          </ParallaxElement>\n        </section>\n\n        {/* Algorithm & Technical Details Section */}\n        <section id=\"algorithm-details\" className=\"relative py-20 px-6\">\n          <ParallaxElement speed={0.1}>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-16 animate-on-scroll\">\n                <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-foreground\">\n                  <span className=\"gemini-badge\">AI Algorithm</span> Details\n                </h2>\n                <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                  Discover how our advanced AI technology powers intelligent food sharing through sophisticated algorithms\n                </p>\n              </div>\n\n              <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n                {/* Left Column - Algorithm Steps */}\n                <div className=\"space-y-8\">\n                  <ParallaxElement speed={0.08} className=\"glass-strong p-8 rounded-2xl animate-on-scroll hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center flex-shrink-0 animate-pulse-glow\">\n                        <span className=\"text-2xl\">📸</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold mb-3 text-foreground\">Image Processing</h3>\n                        <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                          Google Gemini AI analyzes food images using advanced computer vision to identify food types, assess freshness levels, and estimate portion sizes with 95%+ accuracy.\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs text-green-400 font-medium\">Real-time Processing</span>\n                        </div>\n                      </div>\n                    </div>\n                  </ParallaxElement>\n\n                  <ParallaxElement speed={0.06} className=\"glass-strong p-8 rounded-2xl animate-on-scroll hover:scale-105 transition-transform duration-300\" style={{animationDelay: '0.1s'}}>\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center flex-shrink-0 animate-gradient-x\">\n                        <span className=\"text-2xl\">🧠</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold mb-3 text-foreground\">Smart Categorization</h3>\n                        <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                          Machine learning algorithms automatically classify food items into categories (meals, snacks, beverages, produce) and subcategories for efficient browsing.\n                        </p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          <span className=\"px-2 py-1 bg-purple-500/20 text-purple-400 rounded-full text-xs\">Meals</span>\n                          <span className=\"px-2 py-1 bg-pink-500/20 text-pink-400 rounded-full text-xs\">Snacks</span>\n                          <span className=\"px-2 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs\">Beverages</span>\n                        </div>\n                      </div>\n                    </div>\n                  </ParallaxElement>\n\n                  <ParallaxElement speed={0.04} className=\"glass-strong p-8 rounded-2xl animate-on-scroll hover:scale-105 transition-transform duration-300\" style={{animationDelay: '0.2s'}}>\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-2xl flex items-center justify-center flex-shrink-0 animate-float\">\n                        <span className=\"text-2xl\">🌡️</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold mb-3 text-foreground\">Freshness Assessment</h3>\n                        <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                          Multi-factor analysis including visual indicators, time stamps, and environmental conditions to provide safety recommendations.\n                        </p>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                            <span className=\"text-sm text-muted-foreground\">Fresh (0-2 days)</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                            <span className=\"text-sm text-muted-foreground\">Good (2-4 days)</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-3 h-3 bg-orange-500 rounded-full\"></div>\n                            <span className=\"text-sm text-muted-foreground\">Consume Soon (4+ days)</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ParallaxElement>\n                </div>\n\n                {/* Right Column - Technical Flow */}\n                <div className=\"space-y-8\">\n                  <ParallaxElement speed={0.05} className=\"glass-strong p-8 rounded-2xl animate-on-scroll hover:scale-105 transition-transform duration-300\" style={{animationDelay: '0.3s'}}>\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl flex items-center justify-center flex-shrink-0 animate-parallax-float\">\n                        <span className=\"text-2xl\">📊</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold mb-3 text-foreground\">Impact Calculation</h3>\n                        <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                          Real-time carbon footprint reduction calculations based on food waste prevented, using EPA environmental impact data and lifecycle assessment methodologies.\n                        </p>\n                        <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                          <div className=\"text-center p-3 bg-green-500/10 rounded-lg\">\n                            <div className=\"text-lg font-bold text-green-400\">2.3kg</div>\n                            <div className=\"text-xs text-muted-foreground\">CO₂ per kg food</div>\n                          </div>\n                          <div className=\"text-center p-3 bg-blue-500/10 rounded-lg\">\n                            <div className=\"text-lg font-bold text-blue-400\">95%</div>\n                            <div className=\"text-xs text-muted-foreground\">Accuracy rate</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ParallaxElement>\n\n                  <ParallaxElement speed={0.07} className=\"glass-strong p-8 rounded-2xl animate-on-scroll hover:scale-105 transition-transform duration-300\" style={{animationDelay: '0.4s'}}>\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-16 h-16 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center flex-shrink-0 animate-pulse-glow\">\n                        <span className=\"text-2xl\">🔒</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold mb-3 text-foreground\">Privacy & Security</h3>\n                        <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                          All data processing follows Google Cloud security standards with end-to-end encryption, ensuring user privacy while enabling community food sharing.\n                        </p>\n                        <div className=\"flex items-center space-x-4 mt-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                            <span className=\"text-xs text-green-400\">Encrypted</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\"></div>\n                            <span className=\"text-xs text-blue-400\">GDPR Compliant</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ParallaxElement>\n\n                  {/* Algorithm Flow Visualization */}\n                  <ParallaxElement speed={0.03} className=\"glass-strong p-8 rounded-2xl animate-on-scroll\" style={{animationDelay: '0.5s'}}>\n                    <h3 className=\"text-xl font-bold mb-6 text-center text-foreground\">Processing Flow</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-sm font-bold text-white\">1</div>\n                        <div className=\"flex-1 h-2 bg-gradient-to-r from-primary to-blue-500 rounded-full animate-gradient-x\"></div>\n                        <span className=\"text-sm text-muted-foreground\">Image Upload</span>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-sm font-bold text-white\">2</div>\n                        <div className=\"flex-1 h-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-gradient-x\" style={{animationDelay: '0.5s'}}></div>\n                        <span className=\"text-sm text-muted-foreground\">AI Analysis</span>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-sm font-bold text-white\">3</div>\n                        <div className=\"flex-1 h-2 bg-gradient-to-r from-purple-500 to-green-500 rounded-full animate-gradient-x\" style={{animationDelay: '1s'}}></div>\n                        <span className=\"text-sm text-muted-foreground\">Categorization</span>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-sm font-bold text-white\">4</div>\n                        <div className=\"flex-1 h-2 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full animate-gradient-x\" style={{animationDelay: '1.5s'}}></div>\n                        <span className=\"text-sm text-muted-foreground\">Results</span>\n                      </div>\n                    </div>\n                  </ParallaxElement>\n                </div>\n              </div>\n\n              {/* Bottom CTA Section */}\n              <ParallaxElement speed={0.02} className=\"text-center animate-on-scroll\" style={{animationDelay: '0.6s'}}>\n                <div className=\"glass-strong p-12 rounded-3xl\">\n                  <div className=\"flex items-center justify-center space-x-4 mb-6\">\n                    <span className=\"text-lg text-muted-foreground\">Powered by</span>\n                    <span className=\"gemini-badge text-2xl\">Google Gemini AI</span>\n                  </div>\n                  <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                    Experience the future of sustainable food sharing with cutting-edge AI technology that makes every meal count towards a greener planet.\n                  </p>\n                </div>\n              </ParallaxElement>\n            </div>\n          </ParallaxElement>\n        </section>\n      </div>\n    </div>\n  );\n}",
            "size_bytes": 22040
        },
        "client/src/pages/not-found.tsx": {
            "content": "import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
            "size_bytes": 711
        },
        "client/src/components/ui/accordion.tsx": {
            "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
            "size_bytes": 1977
        },
        "client/src/components/ui/alert-dialog.tsx": {
            "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
            "size_bytes": 4420
        },
        "client/src/components/ui/alert.tsx": {
            "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
            "size_bytes": 1584
        },
        "client/src/components/ui/aspect-ratio.tsx": {
            "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
            "size_bytes": 140
        },
        "client/src/components/ui/avatar.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
            "size_bytes": 1419
        },
        "client/src/components/ui/badge.tsx": {
            "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
            "size_bytes": 1128
        },
        "client/src/components/ui/breadcrumb.tsx": {
            "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
            "size_bytes": 2712
        },
        "client/src/components/ui/button.tsx": {
            "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
            "size_bytes": 1901
        },
        "client/src/components/ui/calendar.tsx": {
            "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
            "size_bytes": 2695
        },
        "client/src/components/ui/card.tsx": {
            "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
            "size_bytes": 1858
        },
        "client/src/components/ui/carousel.tsx": {
            "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
            "size_bytes": 6210
        },
        "client/src/components/ui/chart.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
            "size_bytes": 10481
        },
        "client/src/components/ui/checkbox.tsx": {
            "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
            "size_bytes": 1056
        },
        "client/src/components/ui/collapsible.tsx": {
            "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
            "size_bytes": 329
        },
        "client/src/components/ui/command.tsx": {
            "content": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
            "size_bytes": 4885
        },
        "client/src/components/ui/context-menu.tsx": {
            "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
            "size_bytes": 7428
        },
        "client/src/components/ui/dialog.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
            "size_bytes": 3848
        },
        "client/src/components/ui/drawer.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
            "size_bytes": 3021
        },
        "client/src/components/ui/dropdown-menu.tsx": {
            "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
            "size_bytes": 7609
        },
        "client/src/components/ui/form.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
            "size_bytes": 4120
        },
        "client/src/components/ui/hover-card.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
            "size_bytes": 1251
        },
        "client/src/components/ui/input-otp.tsx": {
            "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
            "size_bytes": 2154
        },
        "client/src/components/ui/input.tsx": {
            "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
            "size_bytes": 791
        },
        "client/src/components/ui/label.tsx": {
            "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
            "size_bytes": 710
        },
        "client/src/components/ui/menubar.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
            "size_bytes": 8605
        },
        "client/src/components/ui/navigation-menu.tsx": {
            "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
            "size_bytes": 5128
        },
        "client/src/components/ui/pagination.tsx": {
            "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
            "size_bytes": 2751
        },
        "client/src/components/ui/popover.tsx": {
            "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
            "size_bytes": 1280
        },
        "client/src/components/ui/progress.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
            "size_bytes": 791
        },
        "client/src/components/ui/radio-group.tsx": {
            "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
            "size_bytes": 1467
        },
        "client/src/components/ui/resizable.tsx": {
            "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
            "size_bytes": 1723
        },
        "client/src/components/ui/scroll-area.tsx": {
            "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
            "size_bytes": 1642
        },
        "client/src/components/ui/select.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
            "size_bytes": 5742
        },
        "client/src/components/ui/separator.tsx": {
            "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
            "size_bytes": 756
        },
        "client/src/components/ui/sheet.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
            "size_bytes": 4281
        },
        "client/src/components/ui/sidebar.tsx": {
            "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
            "size_bytes": 23567
        },
        "client/src/components/ui/skeleton.tsx": {
            "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
            "size_bytes": 261
        },
        "client/src/components/ui/slider.tsx": {
            "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
            "size_bytes": 1077
        },
        "client/src/components/ui/switch.tsx": {
            "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
            "size_bytes": 1139
        },
        "client/src/components/ui/table.tsx": {
            "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
            "size_bytes": 2765
        },
        "client/src/components/ui/tabs.tsx": {
            "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
            "size_bytes": 1883
        },
        "client/src/components/ui/textarea.tsx": {
            "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
            "size_bytes": 689
        },
        "client/src/components/ui/toast.tsx": {
            "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
            "size_bytes": 4845
        },
        "client/src/components/ui/toaster.tsx": {
            "content": "import {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}",
            "size_bytes": 771
        },
        "client/src/components/ui/toggle-group.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
            "size_bytes": 1753
        },
        "client/src/components/ui/toggle.tsx": {
            "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
            "size_bytes": 1527
        },
        "client/src/components/ui/tooltip.tsx": {
            "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
            "size_bytes": 1209
        },
        "client/src/components/ui/viewport-border.tsx": {
            "content": "export function ViewportBorder() {\n  return (\n    <div className=\"viewport-border\">\n      <div className=\"viewport-content\" />\n    </div>\n  );\n}\n",
            "size_bytes": 145
        },
        "README.md": {
            "content": "# EcoShare - AI-Powered Campus Food Sharing Platform\n\nTransform campus food waste into community connections with intelligent food sharing powered by Google Gemini AI.\n\n## Features\n\n- 🤖 **AI-Powered Food Analysis**: Automatic categorization and freshness assessment using Google Gemini\n- 🔐 **Google OAuth Authentication**: Secure sign-in with Google accounts\n- 📱 **Responsive Design**: Modern UI with dark mode support\n- 🎯 **Smart Matching**: Connect food providers with recipients efficiently\n- 📊 **Impact Tracking**: Monitor food saved and environmental impact\n- 🔔 **Real-time Notifications**: Stay updated on reservations and pickups\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 18+ \n- PostgreSQL database\n- Google Cloud Platform account (for OAuth and Gemini AI)\n\n### Installation\n\n1. **Clone and install dependencies:**\n```bash\ngit clone <repository-url>\ncd ecoshare\nnpm install\n```\n\n> **For VS Code Users:** See [SETUP_LOCAL.md](SETUP_LOCAL.md) for detailed local development setup instructions.\n\n2. **Set up environment variables:**\n\nCreate a `.env` file in the root directory:\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://username:password@localhost:5432/ecoshare_dev\nPGHOST=localhost\nPGPORT=5432\nPGUSER=your_username\nPGPASSWORD=your_password\nPGDATABASE=ecoshare_dev\n\n# Google OAuth Configuration (Required)\nGOOGLE_CLIENT_ID=your_google_client_id\nGOOGLE_CLIENT_SECRET=your_google_client_secret\n\n# Google Gemini AI (Optional - for food analysis)\nGOOGLE_AI_API_KEY=your_gemini_api_key\n\n# Session Configuration\nSESSION_SECRET=your_secure_session_secret\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\n```\n\n3. **Set up your PostgreSQL database:**\n```bash\n# Create database\ncreatedb ecoshare_dev\n\n# Push schema to database\nnpm run db:push\n```\n\n4. **Configure Google Cloud Services:**\n\n   **For Google OAuth:**\n   - Go to [Google Cloud Console](https://console.cloud.google.com)\n   - Create a new project or select existing\n   - Enable Google+ API or People API\n   - Create OAuth 2.0 credentials\n   - Add `http://localhost:5000` to authorized origins\n   - Add `http://localhost:5000/api/auth/google/callback` to authorized redirect URIs\n\n   **For Gemini AI (Optional):**\n   - Enable the Generative AI API\n   - Create an API key for Gemini\n\n5. **Start the development server:**\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Scripts\n\n- `npm run dev` - Start development server with hot reload\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run db:push` - Push database schema changes\n- `npm run db:studio` - Open Drizzle Studio for database management\n\n## Environment Configuration\n\nThe app automatically detects the environment:\n\n- **Local Development**: Uses `.env` file via dotenv\n- **Replit**: Uses Replit's secure environment system\n- **Production**: Uses system environment variables\n\n## Project Structure\n\n```\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # Custom React hooks\n│   │   └── lib/           # Utilities and API client\n├── server/                # Express.js backend\n│   ├── services/          # External service integrations\n│   ├── db.ts             # Database configuration\n│   ├── env.ts            # Environment variable management\n│   ├── routes.ts         # API routes\n│   └── storage.ts        # Data access layer\n├── shared/               # Shared types and schemas\n│   └── schema.ts        # Database schema and types\n└── README.md\n```\n\n## API Endpoints\n\n### Authentication\n- `GET /api/auth/google` - Initiate Google OAuth\n- `GET /api/auth/google/callback` - OAuth callback\n- `POST /api/auth/logout` - Logout user\n- `GET /api/auth/me` - Get current user\n\n### Food Listings\n- `GET /api/food-listings` - Get all food listings\n- `GET /api/food-listings/:id` - Get specific listing\n- `POST /api/food-listings` - Create new listing (with AI analysis)\n- `GET /api/my-listings` - Get user's listings\n\n### Pickups\n- `POST /api/pickups` - Reserve food for pickup\n- `GET /api/my-pickups` - Get user's pickups\n\n### Statistics\n- `GET /api/stats/platform` - Platform-wide statistics\n- `GET /api/stats/user` - User's personal statistics\n\n### Notifications\n- `GET /api/notifications` - Get user notifications\n- `POST /api/notifications/:id/read` - Mark notification as read\n\n## Technologies\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development and building\n- **Tailwind CSS** for styling\n- **shadcn/ui** for component library\n- **TanStack Query** for server state management\n- **Wouter** for routing\n\n### Backend\n- **Express.js** with TypeScript\n- **Drizzle ORM** for type-safe database operations\n- **PostgreSQL** for data persistence\n- **Passport.js** for authentication\n- **Google Gemini AI** for food analysis\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Commit your changes: `git commit -m 'Add amazing feature'`\n4. Push to the branch: `git push origin feature/amazing-feature`\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Support\n\nFor support and questions, please open an issue in the GitHub repository.",
            "size_bytes": 5492
        },
        "SETUP_LOCAL.md": {
            "content": "# Local Development Setup for EcoShare\n\n## Prerequisites\n\n1. **Node.js 18+** - Download from [nodejs.org](https://nodejs.org/)\n2. **PostgreSQL** - Download from [postgresql.org](https://www.postgresql.org/download/)\n3. **VS Code** - Download from [code.visualstudio.com](https://code.visualstudio.com/)\n\n## Step-by-Step Setup\n\n### 1. Clone and Install Dependencies\n\n```bash\n# Navigate to your project folder in VS Code terminal\ncd path/to/your/project\n\n# Install all dependencies\nnpm install\n```\n\n### 2. Environment Variables Setup\n\nCreate a `.env` file in the root directory with these variables:\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://postgres:password@localhost:5432/ecoshare_dev\nPGHOST=localhost\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=your_postgres_password\nPGDATABASE=ecoshare_dev\n\n# Google OAuth Configuration (Required)\nGOOGLE_CLIENT_ID=your_google_client_id_here\nGOOGLE_CLIENT_SECRET=your_google_client_secret_here\n\n# Google AI Configuration (Optional - for food analysis)\nGOOGLE_AI_API_KEY=your_gemini_api_key_here\n\n# Session Configuration\nSESSION_SECRET=your_secure_random_string_here\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\n```\n\n### 3. Database Setup\n\n```bash\n# Create the database (run in PostgreSQL command line or pgAdmin)\ncreatedb ecoshare_dev\n\n# OR using psql:\npsql -U postgres\nCREATE DATABASE ecoshare_dev;\n\\q\n\n# Push the schema to your database\nnpm run db:push\n```\n\n### 4. Google Cloud Setup\n\n**For Google OAuth:**\n1. Go to [Google Cloud Console](https://console.cloud.google.com)\n2. Create a new project or select existing\n3. Enable Google+ API or People API\n4. Create OAuth 2.0 credentials\n5. Add `http://localhost:5000` to authorized origins\n6. Add `http://localhost:5000/api/auth/google/callback` to authorized redirect URIs\n7. Copy Client ID and Client Secret to your `.env` file\n\n**For Gemini AI (Optional):**\n1. Enable the Generative AI API in your Google Cloud project\n2. Create an API key for Gemini\n3. Add it to your `.env` file as `GOOGLE_AI_API_KEY`\n\n### 5. Running the Application\n\n```bash\n# Development mode (with hot reload)\nnpm run dev\n\n# The app will be available at http://localhost:5000\n```\n\n### 6. VS Code Extensions (Recommended)\n\nInstall these VS Code extensions for better development experience:\n- TypeScript and JavaScript Language Features (built-in)\n- Tailwind CSS IntelliSense\n- ES7+ React/Redux/React-Native snippets\n- PostgreSQL (for database management)\n- Thunder Client (for API testing)\n\n## Common Issues and Solutions\n\n### Issue: `cross-env not found`\n```bash\nnpm install cross-env --save-dev\n```\n\n### Issue: Database connection errors\n- Make sure PostgreSQL is running\n- Check your DATABASE_URL format\n- Verify database exists: `psql -U postgres -l`\n\n### Issue: Google OAuth not working\n- Check your OAuth credentials\n- Verify redirect URIs match exactly\n- Make sure APIs are enabled in Google Cloud Console\n\n### Issue: Port 5000 already in use\n```bash\n# Kill process on port 5000\nnpx kill-port 5000\n\n# Or change port in .env file\nPORT=3000\n```\n\n## Development Commands\n\n```bash\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm run start\n\n# Type checking\nnpm run check\n\n# Database operations\nnpm run db:push    # Push schema changes\nnpm run db:studio  # Open database GUI\n```\n\n## Project Structure\n\n```\n├── client/          # React frontend\n├── server/          # Express backend\n├── shared/          # Shared types and schemas\n├── .env            # Environment variables (create this)\n├── .env.example    # Environment template\n└── package.json    # Dependencies and scripts\n```\n\n## Troubleshooting\n\nIf you encounter any issues:\n1. Make sure all dependencies are installed: `npm install`\n2. Check that PostgreSQL is running and accessible\n3. Verify your `.env` file has all required variables\n4. Check the VS Code terminal for error messages\n5. Try restarting the development server: `Ctrl+C` then `npm run dev`",
            "size_bytes": 3995
        },
        "server/env.ts": {
            "content": "import { config } from 'dotenv';\n\n// Load .env file only in local development\nif (process.env.NODE_ENV !== 'production' && !process.env.REPLIT_DOMAINS) {\n  config();\n}\n\nexport const env = {\n  // Database Configuration\n  DATABASE_URL: process.env.DATABASE_URL || '',\n  PGHOST: process.env.PGHOST || 'localhost',\n  PGPORT: process.env.PGPORT || '5432',\n  PGUSER: process.env.PGUSER || 'postgres',\n  PGPASSWORD: process.env.PGPASSWORD || '',\n  PGDATABASE: process.env.PGDATABASE || 'ecoshare_dev',\n\n  // Google OAuth Configuration\n  GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID || '',\n  GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET || '',\n  \n  // Google AI Configuration (Optional)\n  GOOGLE_AI_API_KEY: process.env.GOOGLE_AI_API_KEY || '',\n\n  // Session Configuration\n  SESSION_SECRET: process.env.SESSION_SECRET || 'default-development-secret',\n\n  // Server Configuration\n  PORT: parseInt(process.env.PORT || '5000', 10),\n  NODE_ENV: process.env.NODE_ENV || 'development',\n\n  // Helper functions\n  isProduction: () => process.env.NODE_ENV === 'production',\n  isDevelopment: () => process.env.NODE_ENV === 'development',\n  isReplit: () => !!process.env.REPLIT_DOMAINS,\n} as const;\n\n// Validation for required environment variables\nconst requiredVars = ['DATABASE_URL', 'GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET'];\n\nfor (const varName of requiredVars) {\n  if (!env[varName as keyof typeof env]) {\n    throw new Error(`Required environment variable ${varName} is not set`);\n  }\n}",
            "size_bytes": 1486
        },
        "client/src/components/parallax-container.tsx": {
            "content": "import { useEffect, useRef } from \"react\";\n\ninterface ParallaxContainerProps {\n  children: React.ReactNode;\n  speed?: number;\n  className?: string;\n}\n\nexport function ParallaxContainer({ children, speed = 0.5, className = \"\" }: ParallaxContainerProps) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const handleScroll = () => {\n      const scrolled = window.pageYOffset;\n      const parallax = scrolled * speed;\n      element.style.transform = `translateY(${parallax}px)`;\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [speed]);\n\n  return (\n    <div ref={elementRef} className={`parallax-element ${className}`}>\n      {children}\n    </div>\n  );\n}\n\ninterface ParallaxElementProps {\n  children: React.ReactNode;\n  speed?: number;\n  direction?: 'up' | 'down';\n  className?: string;\n}\n\nexport function ParallaxElement({ children, speed = 0.3, direction = 'up', className = \"\" }: ParallaxElementProps) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const handleScroll = () => {\n            const scrolled = window.pageYOffset;\n            const rate = scrolled * -speed;\n            const yPos = direction === 'up' ? rate : -rate;\n            element.style.transform = `translate3d(0, ${yPos}px, 0)`;\n          };\n\n          window.addEventListener('scroll', handleScroll);\n          return () => window.removeEventListener('scroll', handleScroll);\n        }\n      });\n    });\n\n    observer.observe(element);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [speed, direction]);\n\n  return (\n    <div ref={elementRef} className={`parallax-element ${className}`}>\n      {children}\n    </div>\n  );\n}",
            "size_bytes": 2024
        },
        "client/src/components/theme-provider.tsx": {
            "content": "import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ecoshare-ui-theme\",\n}: {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};",
            "size_bytes": 1677
        },
        "client/src/components/theme-toggle.tsx": {
            "content": "import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={toggleTheme}\n      className=\"relative w-9 h-9 rounded-full hover:bg-surface transition-all duration-300\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}",
            "size_bytes": 689
        }
    }
}